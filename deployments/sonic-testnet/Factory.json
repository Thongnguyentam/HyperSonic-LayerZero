{
  "address": "0x32F6299FF348A0809286A150d7345B4A9eF099d3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lzEndpoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidDelegate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEndpointCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LzTokenUnavailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "NoPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "msgValue",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughNative",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "OnlyEndpoint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "sender",
          "type": "bytes32"
        }
      ],
      "name": "OnlyPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "name": "PeerSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_REWARD_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TARGET",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        }
      ],
      "name": "allowInitializePath",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpointV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getPriceForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getTokenSale",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "raised",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isOpen",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isLiquidityCreated",
              "type": "bool"
            }
          ],
          "internalType": "struct Factory.TokenSale",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasClaimedReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isComposeMsgSender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpoint",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeLiquidityPool",
      "outputs": [
        {
          "internalType": "contract NativeLiquidityPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nextNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oAppVersion",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "senderVersion",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "receiverVersion",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "peers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        }
      ],
      "name": "sendLaunchToRemoteChain",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidityPool",
          "type": "address"
        }
      ],
      "name": "setLiquidityPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_peer",
          "type": "bytes32"
        }
      ],
      "name": "setPeer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenContributors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenToSale",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raised",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isOpen",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isLiquidityCreated",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userEthContributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userTokenContributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3c735e918d092a0c76116e840fe00c7de3de1bca286416debe54b54bfa95258e",
  "receipt": {
    "to": null,
    "from": "0xb88d1d385f31A83a44c9E72219EBbB2a31f213F2",
    "contractAddress": "0x32F6299FF348A0809286A150d7345B4A9eF099d3",
    "transactionIndex": 0,
    "gasUsed": "5374852",
    "logsBloom": "0x
    "blockHash": "0x9777cd647cd3dff91cada975db08052c305725b549a9d6dcf899702414e586eb",
    "transactionHash": "0x3c735e918d092a0c76116e840fe00c7de3de1bca286416debe54b54bfa95258e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 28439494,
        "transactionHash": "0x3c735e918d092a0c76116e840fe00c7de3de1bca286416debe54b54bfa95258e",
        "address": "0x32F6299FF348A0809286A150d7345B4A9eF099d3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b88d1d385f31a83a44c9e72219ebbb2a31f213f2"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9777cd647cd3dff91cada975db08052c305725b549a9d6dcf899702414e586eb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 28439494,
        "transactionHash": "0x3c735e918d092a0c76116e840fe00c7de3de1bca286416debe54b54bfa95258e",
        "address": "0x6C7Ab2202C98C4227C5c46f1417D81144DA716Ff",
        "topics": [
          "0x6ee10e9ed4d6ce9742703a498707862f4b00f1396a87195eb93267b3d7983981"
        ],
        "data": "0x00000000000000000000000032f6299ff348a0809286a150d7345b4a9ef099d3000000000000000000000000b88d1d385f31a83a44c9e72219ebbb2a31f213f2",
        "logIndex": 1,
        "blockHash": "0x9777cd647cd3dff91cada975db08052c305725b549a9d6dcf899702414e586eb"
      }
    ],
    "blockNumber": 28439494,
    "cumulativeGasUsed": "5374852",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "10000000000000000",
    "0x6C7Ab2202C98C4227C5c46f1417D81144DA716Ff"
  ],
  "numDeployments": 1,
  "solcInputHash": "3c5e22c543eec4dc235ae1f53d7b5826",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lzEndpoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"NotEnoughNative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_REWARD_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TARGET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"}],\"name\":\"allowInitializePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getPriceForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTokenSale\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raised\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLiquidityCreated\",\"type\":\"bool\"}],\"internalType\":\"struct Factory.TokenSale\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasClaimedReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isComposeMsgSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeLiquidityPool\",\"outputs\":[{\"internalType\":\"contract NativeLiquidityPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"sendLaunchToRemoteChain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityPool\",\"type\":\"address\"}],\"name\":\"setLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenContributors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToSale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raised\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLiquidityCreated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userEthContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTokenContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"allowInitializePath((uint32,bytes32,uint64))\":{\"details\":\"This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.\",\"params\":{\"origin\":\"The origin information containing the source endpoint and sender address.\"},\"returns\":{\"_0\":\"Whether the path has been initialized.\"}},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"details\":\"_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.\",\"params\":{\"_sender\":\"The sender address.\"},\"returns\":{\"_0\":\"isSender Is a valid sender.\"}},\"lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)\":{\"details\":\"Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.\",\"params\":{\"_executor\":\"The address of the executor for the received message.\",\"_extraData\":\"Additional arbitrary data provided by the corresponding executor.\",\"_guid\":\"The unique identifier for the received LayerZero message.\",\"_message\":\"The payload of the received message.\",\"_origin\":\"The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message.\"}},\"nextNonce(uint32,bytes32)\":{\"details\":\"_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\",\"returns\":{\"nonce\":\"The next nonce.\"}},\"oAppVersion()\":{\"returns\":{\"receiverVersion\":\"The version of the OAppReceiver.sol implementation.\",\"senderVersion\":\"The version of the OAppSender.sol implementation.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setDelegate(address)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\",\"params\":{\"_delegate\":\"The address of the delegate to be set.\"}},\"setPeer(uint32,bytes32)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_peer\":\"The address of the peer to be associated with the corresponding endpoint.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowInitializePath((uint32,bytes32,uint64))\":{\"notice\":\"Checks if the path initialization is allowed based on the provided origin.\"},\"endpoint()\":{\"notice\":\"Retrieves the LayerZero endpoint associated with the OApp.\"},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"notice\":\"Indicates whether an address is an approved composeMsg sender to the Endpoint.\"},\"nextNonce(uint32,bytes32)\":{\"notice\":\"Retrieves the next nonce for a given source endpoint and sender address.\"},\"oAppVersion()\":{\"notice\":\"Retrieves the OApp version information.\"},\"peers(uint32)\":{\"notice\":\"Retrieves the peer (OApp) associated with a corresponding endpoint.\"},\"setDelegate(address)\":{\"notice\":\"Sets the delegate address for the OApp.\"},\"setPeer(uint32,bytes32)\":{\"notice\":\"Sets the peer address (OApp instance) for a corresponding endpoint.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory.sol\":\"Factory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport { SetConfigParam } from \\\"./IMessageLibManager.sol\\\";\\n\\nenum MessageLibType {\\n    Send,\\n    Receive,\\n    SendAndReceive\\n}\\n\\ninterface IMessageLib is IERC165 {\\n    function setConfig(address _oapp, SetConfigParam[] calldata _config) external;\\n\\n    function getConfig(uint32 _eid, address _oapp, uint32 _configType) external view returns (bytes memory config);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    // message libs of same major version are compatible\\n    function version() external view returns (uint64 major, uint8 minor, uint8 endpointVersion);\\n\\n    function messageLibType() external view returns (MessageLibType);\\n}\\n\",\"keccak256\":\"0x5cf5f24751b4e3ea1c9c5ded07cedfdfd62566b6daaffcc0144733859c9dba0c\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ISendLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { MessagingFee } from \\\"./ILayerZeroEndpointV2.sol\\\";\\nimport { IMessageLib } from \\\"./IMessageLib.sol\\\";\\n\\nstruct Packet {\\n    uint64 nonce;\\n    uint32 srcEid;\\n    address sender;\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes32 guid;\\n    bytes message;\\n}\\n\\ninterface ISendLib is IMessageLib {\\n    function send(\\n        Packet calldata _packet,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) external returns (MessagingFee memory, bytes memory encodedPacket);\\n\\n    function quote(\\n        Packet calldata _packet,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) external view returns (MessagingFee memory);\\n\\n    function setTreasury(address _treasury) external;\\n\\n    function withdrawFee(address _to, uint256 _amount) external;\\n\\n    function withdrawLzTokenFee(address _lzToken, address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xf1c07bc61e7b1dce195ed12d50f87980fbf2d63cac1326fd28287f55fe0ba625\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nlibrary AddressCast {\\n    error AddressCast_InvalidSizeForAddress();\\n    error AddressCast_InvalidAddress();\\n\\n    function toBytes32(bytes calldata _addressBytes) internal pure returns (bytes32 result) {\\n        if (_addressBytes.length > 32) revert AddressCast_InvalidAddress();\\n        result = bytes32(_addressBytes);\\n        unchecked {\\n            uint256 offset = 32 - _addressBytes.length;\\n            result = result >> (offset * 8);\\n        }\\n    }\\n\\n    function toBytes32(address _address) internal pure returns (bytes32 result) {\\n        result = bytes32(uint256(uint160(_address)));\\n    }\\n\\n    function toBytes(bytes32 _addressBytes32, uint256 _size) internal pure returns (bytes memory result) {\\n        if (_size == 0 || _size > 32) revert AddressCast_InvalidSizeForAddress();\\n        result = new bytes(_size);\\n        unchecked {\\n            uint256 offset = 256 - _size * 8;\\n            assembly {\\n                mstore(add(result, 32), shl(offset, _addressBytes32))\\n            }\\n        }\\n    }\\n\\n    function toAddress(bytes32 _addressBytes32) internal pure returns (address result) {\\n        result = address(uint160(uint256(_addressBytes32)));\\n    }\\n\\n    function toAddress(bytes calldata _addressBytes) internal pure returns (address result) {\\n        if (_addressBytes.length != 20) revert AddressCast_InvalidAddress();\\n        result = address(bytes20(_addressBytes));\\n    }\\n}\\n\",\"keccak256\":\"0x2ebbcaaab3554edcd41b581f1a72ac1806afbfb8047d0d47ff098f9af30d6deb\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { Packet } from \\\"../../interfaces/ISendLib.sol\\\";\\nimport { AddressCast } from \\\"../../libs/AddressCast.sol\\\";\\n\\nlibrary PacketV1Codec {\\n    using AddressCast for address;\\n    using AddressCast for bytes32;\\n\\n    uint8 internal constant PACKET_VERSION = 1;\\n\\n    // header (version + nonce + path)\\n    // version\\n    uint256 private constant PACKET_VERSION_OFFSET = 0;\\n    //    nonce\\n    uint256 private constant NONCE_OFFSET = 1;\\n    //    path\\n    uint256 private constant SRC_EID_OFFSET = 9;\\n    uint256 private constant SENDER_OFFSET = 13;\\n    uint256 private constant DST_EID_OFFSET = 45;\\n    uint256 private constant RECEIVER_OFFSET = 49;\\n    // payload (guid + message)\\n    uint256 private constant GUID_OFFSET = 81; // keccak256(nonce + path)\\n    uint256 private constant MESSAGE_OFFSET = 113;\\n\\n    function encode(Packet memory _packet) internal pure returns (bytes memory encodedPacket) {\\n        encodedPacket = abi.encodePacked(\\n            PACKET_VERSION,\\n            _packet.nonce,\\n            _packet.srcEid,\\n            _packet.sender.toBytes32(),\\n            _packet.dstEid,\\n            _packet.receiver,\\n            _packet.guid,\\n            _packet.message\\n        );\\n    }\\n\\n    function encodePacketHeader(Packet memory _packet) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                PACKET_VERSION,\\n                _packet.nonce,\\n                _packet.srcEid,\\n                _packet.sender.toBytes32(),\\n                _packet.dstEid,\\n                _packet.receiver\\n            );\\n    }\\n\\n    function encodePayload(Packet memory _packet) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_packet.guid, _packet.message);\\n    }\\n\\n    function header(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return _packet[0:GUID_OFFSET];\\n    }\\n\\n    function version(bytes calldata _packet) internal pure returns (uint8) {\\n        return uint8(bytes1(_packet[PACKET_VERSION_OFFSET:NONCE_OFFSET]));\\n    }\\n\\n    function nonce(bytes calldata _packet) internal pure returns (uint64) {\\n        return uint64(bytes8(_packet[NONCE_OFFSET:SRC_EID_OFFSET]));\\n    }\\n\\n    function srcEid(bytes calldata _packet) internal pure returns (uint32) {\\n        return uint32(bytes4(_packet[SRC_EID_OFFSET:SENDER_OFFSET]));\\n    }\\n\\n    function sender(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[SENDER_OFFSET:DST_EID_OFFSET]);\\n    }\\n\\n    function senderAddressB20(bytes calldata _packet) internal pure returns (address) {\\n        return sender(_packet).toAddress();\\n    }\\n\\n    function dstEid(bytes calldata _packet) internal pure returns (uint32) {\\n        return uint32(bytes4(_packet[DST_EID_OFFSET:RECEIVER_OFFSET]));\\n    }\\n\\n    function receiver(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[RECEIVER_OFFSET:GUID_OFFSET]);\\n    }\\n\\n    function receiverB20(bytes calldata _packet) internal pure returns (address) {\\n        return receiver(_packet).toAddress();\\n    }\\n\\n    function guid(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[GUID_OFFSET:MESSAGE_OFFSET]);\\n    }\\n\\n    function message(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return bytes(_packet[MESSAGE_OFFSET:]);\\n    }\\n\\n    function payload(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return bytes(_packet[GUID_OFFSET:]);\\n    }\\n\\n    function payloadHash(bytes calldata _packet) internal pure returns (bytes32) {\\n        return keccak256(payload(_packet));\\n    }\\n}\\n\",\"keccak256\":\"0xc84cf1bf785977fe1fbe7566eef902c2db68d0e163813ebe6c34921754802680\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppSender, MessagingFee, MessagingReceipt } from \\\"./OAppSender.sol\\\";\\n// @dev Import the 'Origin' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppReceiver, Origin } from \\\"./OAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OApp\\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\\n */\\nabstract contract OApp is OAppSender, OAppReceiver {\\n    /**\\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol implementation.\\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\\n     */\\n    function oAppVersion()\\n        public\\n        pure\\n        virtual\\n        override(OAppSender, OAppReceiver)\\n        returns (uint64 senderVersion, uint64 receiverVersion)\\n    {\\n        return (SENDER_VERSION, RECEIVER_VERSION);\\n    }\\n}\\n\",\"keccak256\":\"0xac362c4c291fad2f1511a968424b2e78a5ad502d1c867bd31da04be742aca8c5\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IOAppReceiver, Origin } from \\\"./interfaces/IOAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppReceiver\\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\\n */\\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\\n    // Custom error message for when the caller is not the registered endpoint/\\n    error OnlyEndpoint(address addr);\\n\\n    // @dev The version of the OAppReceiver implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant RECEIVER_VERSION = 2;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\\n     * ie. this is a RECEIVE only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (0, RECEIVER_VERSION);\\n    }\\n\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @dev _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @dev _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata /*_origin*/,\\n        bytes calldata /*_message*/,\\n        address _sender\\n    ) public view virtual returns (bool) {\\n        return _sender == address(this);\\n    }\\n\\n    /**\\n     * @notice Checks if the path initialization is allowed based on the provided origin.\\n     * @param origin The origin information containing the source endpoint and sender address.\\n     * @return Whether the path has been initialized.\\n     *\\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\\n     * @dev This defaults to assuming if a peer has been set, its initialized.\\n     * Can be overridden by the OApp if there is other logic to determine this.\\n     */\\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\\n        return peers[origin.srcEid] == origin.sender;\\n    }\\n\\n    /**\\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\\n     * @dev _srcEid The source endpoint ID.\\n     * @dev _sender The sender address.\\n     * @return nonce The next nonce.\\n     *\\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\\n     * @dev This is also enforced by the OApp.\\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\\n     */\\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Entry point for receiving messages or packets from the endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The payload of the received message.\\n     * @param _executor The address of the executor for the received message.\\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\\n     *\\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\\n     */\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) public payable virtual {\\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\\n\\n        // Ensure that the sender matches the expected peer for the source endpoint.\\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\\n\\n        // Call the internal OApp implementation of lzReceive.\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x0174e9f1ec4cefe4b5adc26c392269c699b9ff75965364e5b7264426a462c70b\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSender is OAppCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\",\"keccak256\":\"0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppMsgInspector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IOAppMsgInspector\\n * @dev Interface for the OApp Message Inspector, allowing examination of message and options contents.\\n */\\ninterface IOAppMsgInspector {\\n    // Custom error message for inspection failure\\n    error InspectionFailed(bytes message, bytes options);\\n\\n    /**\\n     * @notice Allows the inspector to examine LayerZero message contents and optionally throw a revert if invalid.\\n     * @param _message The message payload to be inspected.\\n     * @param _options Additional options or parameters for inspection.\\n     * @return valid A boolean indicating whether the inspection passed (true) or failed (false).\\n     *\\n     * @dev Optionally done as a revert, OR use the boolean provided to handle the failure.\\n     */\\n    function inspect(bytes calldata _message, bytes calldata _options) external view returns (bool valid);\\n}\\n\",\"keccak256\":\"0x339654e699043c400cad92de209aa23855ce10211c31cf4114042cc5224d3b7c\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Struct representing enforced option parameters.\\n */\\nstruct EnforcedOptionParam {\\n    uint32 eid; // Endpoint ID\\n    uint16 msgType; // Message Type\\n    bytes options; // Additional options\\n}\\n\\n/**\\n * @title IOAppOptionsType3\\n * @dev Interface for the OApp with Type 3 Options, allowing the setting and combining of enforced options.\\n */\\ninterface IOAppOptionsType3 {\\n    // Custom error message for invalid options\\n    error InvalidOptions(bytes options);\\n\\n    // Event emitted when enforced options are set\\n    event EnforcedOptionSet(EnforcedOptionParam[] _enforcedOptions);\\n\\n    /**\\n     * @notice Sets enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) external;\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OApp message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) external view returns (bytes memory options);\\n}\\n\",\"keccak256\":\"0x9fc08a51e9d7c9c710c4eb26f84fe77228305ad7da63fa486ff24ebf2f3bc461\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroReceiver, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOAppReceiver is ILayerZeroReceiver {\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata _origin,\\n        bytes calldata _message,\\n        address _sender\\n    ) external view returns (bool isSender);\\n}\\n\",\"keccak256\":\"0xd26135185e19b3732746d4a9e2923e896f28dec8664bab161faea2ee26fcdc3d\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppOptionsType3, EnforcedOptionParam } from \\\"../interfaces/IOAppOptionsType3.sol\\\";\\n\\n/**\\n * @title OAppOptionsType3\\n * @dev Abstract contract implementing the IOAppOptionsType3 interface with type 3 options.\\n */\\nabstract contract OAppOptionsType3 is IOAppOptionsType3, Ownable {\\n    uint16 internal constant OPTION_TYPE_3 = 3;\\n\\n    // @dev The \\\"msgType\\\" should be defined in the child contract.\\n    mapping(uint32 eid => mapping(uint16 msgType => bytes enforcedOption)) public enforcedOptions;\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) public virtual onlyOwner {\\n        _setEnforcedOptions(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function _setEnforcedOptions(EnforcedOptionParam[] memory _enforcedOptions) internal virtual {\\n        for (uint256 i = 0; i < _enforcedOptions.length; i++) {\\n            // @dev Enforced options are only available for optionType 3, as type 1 and 2 dont support combining.\\n            _assertOptionsType3(_enforcedOptions[i].options);\\n            enforcedOptions[_enforcedOptions[i].eid][_enforcedOptions[i].msgType] = _enforcedOptions[i].options;\\n        }\\n\\n        emit EnforcedOptionSet(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OAPP message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     *\\n     * @dev If there is an enforced lzReceive option:\\n     * - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether}\\n     * - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.\\n     * @dev This presence of duplicated options is handled off-chain in the verifier/executor.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) public view virtual returns (bytes memory) {\\n        bytes memory enforced = enforcedOptions[_eid][_msgType];\\n\\n        // No enforced options, pass whatever the caller supplied, even if it's empty or legacy type 1/2 options.\\n        if (enforced.length == 0) return _extraOptions;\\n\\n        // No caller options, return enforced\\n        if (_extraOptions.length == 0) return enforced;\\n\\n        // @dev If caller provided _extraOptions, must be type 3 as its the ONLY type that can be combined.\\n        if (_extraOptions.length >= 2) {\\n            _assertOptionsType3(_extraOptions);\\n            // @dev Remove the first 2 bytes containing the type from the _extraOptions and combine with enforced.\\n            return bytes.concat(enforced, _extraOptions[2:]);\\n        }\\n\\n        // No valid set of options was found.\\n        revert InvalidOptions(_extraOptions);\\n    }\\n\\n    /**\\n     * @dev Internal function to assert that options are of type 3.\\n     * @param _options The options to be checked.\\n     */\\n    function _assertOptionsType3(bytes memory _options) internal pure virtual {\\n        uint16 optionsType;\\n        assembly {\\n            optionsType := mload(add(_options, 2))\\n        }\\n        if (optionsType != OPTION_TYPE_3) revert InvalidOptions(_options);\\n    }\\n}\\n\",\"keccak256\":\"0x5275636cd47e660a2fdf6c7fe9d41ff3cc866b785cc8a9d88c1b8ca983509f01\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/precrime/OAppPreCrimeSimulator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IPreCrime } from \\\"./interfaces/IPreCrime.sol\\\";\\nimport { IOAppPreCrimeSimulator, InboundPacket, Origin } from \\\"./interfaces/IOAppPreCrimeSimulator.sol\\\";\\n\\n/**\\n * @title OAppPreCrimeSimulator\\n * @dev Abstract contract serving as the base for preCrime simulation functionality in an OApp.\\n */\\nabstract contract OAppPreCrimeSimulator is IOAppPreCrimeSimulator, Ownable {\\n    // The address of the preCrime implementation.\\n    address public preCrime;\\n\\n    /**\\n     * @dev Retrieves the address of the OApp contract.\\n     * @return The address of the OApp contract.\\n     *\\n     * @dev The simulator contract is the base contract for the OApp by default.\\n     * @dev If the simulator is a separate contract, override this function.\\n     */\\n    function oApp() external view virtual returns (address) {\\n        return address(this);\\n    }\\n\\n    /**\\n     * @dev Sets the preCrime contract address.\\n     * @param _preCrime The address of the preCrime contract.\\n     */\\n    function setPreCrime(address _preCrime) public virtual onlyOwner {\\n        preCrime = _preCrime;\\n        emit PreCrimeSet(_preCrime);\\n    }\\n\\n    /**\\n     * @dev Interface for pre-crime simulations. Always reverts at the end with the simulation results.\\n     * @param _packets An array of InboundPacket objects representing received packets to be delivered.\\n     *\\n     * @dev WARNING: MUST revert at the end with the simulation results.\\n     * @dev Gives the preCrime implementation the ability to mock sending packets to the lzReceive function,\\n     * WITHOUT actually executing them.\\n     */\\n    function lzReceiveAndRevert(InboundPacket[] calldata _packets) public payable virtual {\\n        for (uint256 i = 0; i < _packets.length; i++) {\\n            InboundPacket calldata packet = _packets[i];\\n\\n            // Ignore packets that are not from trusted peers.\\n            if (!isPeer(packet.origin.srcEid, packet.origin.sender)) continue;\\n\\n            // @dev Because a verifier is calling this function, it doesnt have access to executor params:\\n            //  - address _executor\\n            //  - bytes calldata _extraData\\n            // preCrime will NOT work for OApps that rely on these two parameters inside of their _lzReceive().\\n            // They are instead stubbed to default values, address(0) and bytes(\\\"\\\")\\n            // @dev Calling this.lzReceiveSimulate removes ability for assembly return 0 callstack exit,\\n            // which would cause the revert to be ignored.\\n            this.lzReceiveSimulate{ value: packet.value }(\\n                packet.origin,\\n                packet.guid,\\n                packet.message,\\n                packet.executor,\\n                packet.extraData\\n            );\\n        }\\n\\n        // @dev Revert with the simulation results. msg.sender must implement IPreCrime.buildSimulationResult().\\n        revert SimulationResult(IPreCrime(msg.sender).buildSimulationResult());\\n    }\\n\\n    /**\\n     * @dev Is effectively an internal function because msg.sender must be address(this).\\n     * Allows resetting the call stack for 'internal' calls.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier of the packet.\\n     * @param _message The message payload of the packet.\\n     * @param _executor The executor address for the packet.\\n     * @param _extraData Additional data for the packet.\\n     */\\n    function lzReceiveSimulate(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable virtual {\\n        // @dev Ensure ONLY can be called 'internally'.\\n        if (msg.sender != address(this)) revert OnlySelf();\\n        _lzReceiveSimulate(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to handle the OAppPreCrimeSimulator simulated receive.\\n     * @param _origin The origin information.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address from the src chain.\\n     *  - nonce: The nonce of the LayerZero message.\\n     * @param _guid The GUID of the LayerZero message.\\n     * @param _message The LayerZero message.\\n     * @param _executor The address of the off-chain executor.\\n     * @param _extraData Arbitrary data passed by the msg executor.\\n     *\\n     * @dev Enables the preCrime simulator to mock sending lzReceive() messages,\\n     * routes the msg down from the OAppPreCrimeSimulator, and back up to the OAppReceiver.\\n     */\\n    function _lzReceiveSimulate(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n\\n    /**\\n     * @dev checks if the specified peer is considered 'trusted' by the OApp.\\n     * @param _eid The endpoint Id to check.\\n     * @param _peer The peer to check.\\n     * @return Whether the peer passed is considered 'trusted' by the OApp.\\n     */\\n    function isPeer(uint32 _eid, bytes32 _peer) public view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x205a0abfd8b3c9af2740769f251381b84999b8e9347f3cd50de3ef8290a17750\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/precrime/interfaces/IOAppPreCrimeSimulator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// @dev Import the Origin so it's exposed to OAppPreCrimeSimulator implementers.\\n// solhint-disable-next-line no-unused-import\\nimport { InboundPacket, Origin } from \\\"../libs/Packet.sol\\\";\\n\\n/**\\n * @title IOAppPreCrimeSimulator Interface\\n * @dev Interface for the preCrime simulation functionality in an OApp.\\n */\\ninterface IOAppPreCrimeSimulator {\\n    // @dev simulation result used in PreCrime implementation\\n    error SimulationResult(bytes result);\\n    error OnlySelf();\\n\\n    /**\\n     * @dev Emitted when the preCrime contract address is set.\\n     * @param preCrimeAddress The address of the preCrime contract.\\n     */\\n    event PreCrimeSet(address preCrimeAddress);\\n\\n    /**\\n     * @dev Retrieves the address of the preCrime contract implementation.\\n     * @return The address of the preCrime contract.\\n     */\\n    function preCrime() external view returns (address);\\n\\n    /**\\n     * @dev Retrieves the address of the OApp contract.\\n     * @return The address of the OApp contract.\\n     */\\n    function oApp() external view returns (address);\\n\\n    /**\\n     * @dev Sets the preCrime contract address.\\n     * @param _preCrime The address of the preCrime contract.\\n     */\\n    function setPreCrime(address _preCrime) external;\\n\\n    /**\\n     * @dev Mocks receiving a packet, then reverts with a series of data to infer the state/result.\\n     * @param _packets An array of LayerZero InboundPacket objects representing received packets.\\n     */\\n    function lzReceiveAndRevert(InboundPacket[] calldata _packets) external payable;\\n\\n    /**\\n     * @dev checks if the specified peer is considered 'trusted' by the OApp.\\n     * @param _eid The endpoint Id to check.\\n     * @param _peer The peer to check.\\n     * @return Whether the peer passed is considered 'trusted' by the OApp.\\n     */\\n    function isPeer(uint32 _eid, bytes32 _peer) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5d24db150949ea8e6437178e65a942e8c8b7f332e5daf32750f56b23b35b5bb2\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/precrime/interfaces/IPreCrime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\nstruct PreCrimePeer {\\n    uint32 eid;\\n    bytes32 preCrime;\\n    bytes32 oApp;\\n}\\n\\n// TODO not done yet\\ninterface IPreCrime {\\n    error OnlyOffChain();\\n\\n    // for simulate()\\n    error PacketOversize(uint256 max, uint256 actual);\\n    error PacketUnsorted();\\n    error SimulationFailed(bytes reason);\\n\\n    // for preCrime()\\n    error SimulationResultNotFound(uint32 eid);\\n    error InvalidSimulationResult(uint32 eid, bytes reason);\\n    error CrimeFound(bytes crime);\\n\\n    function getConfig(bytes[] calldata _packets, uint256[] calldata _packetMsgValues) external returns (bytes memory);\\n\\n    function simulate(\\n        bytes[] calldata _packets,\\n        uint256[] calldata _packetMsgValues\\n    ) external payable returns (bytes memory);\\n\\n    function buildSimulationResult() external view returns (bytes memory);\\n\\n    function preCrime(\\n        bytes[] calldata _packets,\\n        uint256[] calldata _packetMsgValues,\\n        bytes[] calldata _simulations\\n    ) external;\\n\\n    function version() external view returns (uint64 major, uint8 minor);\\n}\\n\",\"keccak256\":\"0xc8d869f27ef8ceb2e13fdf6a70682fd4dee3f90c4924eb8e125bc1e66cb6af84\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/precrime/libs/Packet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { PacketV1Codec } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\\\";\\n\\n/**\\n * @title InboundPacket\\n * @dev Structure representing an inbound packet received by the contract.\\n */\\nstruct InboundPacket {\\n    Origin origin; // Origin information of the packet.\\n    uint32 dstEid; // Destination endpointId of the packet.\\n    address receiver; // Receiver address for the packet.\\n    bytes32 guid; // Unique identifier of the packet.\\n    uint256 value; // msg.value of the packet.\\n    address executor; // Executor address for the packet.\\n    bytes message; // Message payload of the packet.\\n    bytes extraData; // Additional arbitrary data for the packet.\\n}\\n\\n/**\\n * @title PacketDecoder\\n * @dev Library for decoding LayerZero packets.\\n */\\nlibrary PacketDecoder {\\n    using PacketV1Codec for bytes;\\n\\n    /**\\n     * @dev Decode an inbound packet from the given packet data.\\n     * @param _packet The packet data to decode.\\n     * @return packet An InboundPacket struct representing the decoded packet.\\n     */\\n    function decode(bytes calldata _packet) internal pure returns (InboundPacket memory packet) {\\n        packet.origin = Origin(_packet.srcEid(), _packet.sender(), _packet.nonce());\\n        packet.dstEid = _packet.dstEid();\\n        packet.receiver = _packet.receiverB20();\\n        packet.guid = _packet.guid();\\n        packet.message = _packet.message();\\n    }\\n\\n    /**\\n     * @dev Decode multiple inbound packets from the given packet data and associated message values.\\n     * @param _packets An array of packet data to decode.\\n     * @param _packetMsgValues An array of associated message values for each packet.\\n     * @return packets An array of InboundPacket structs representing the decoded packets.\\n     */\\n    function decode(\\n        bytes[] calldata _packets,\\n        uint256[] memory _packetMsgValues\\n    ) internal pure returns (InboundPacket[] memory packets) {\\n        packets = new InboundPacket[](_packets.length);\\n        for (uint256 i = 0; i < _packets.length; i++) {\\n            bytes calldata packet = _packets[i];\\n            packets[i] = PacketDecoder.decode(packet);\\n            // @dev Allows the verifier to specify the msg.value that gets passed in lzReceive.\\n            packets[i].value = _packetMsgValues[i];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcb2fb1c5b2eb3731de78b479b9c2ab3bba326fe0b0b3a008590f18e881e457a6\",\"license\":\"MIT\"},\"@layerzerolabs/oft-evm/contracts/OFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { IOFT, OFTCore } from \\\"./OFTCore.sol\\\";\\n\\n/**\\n * @title OFT Contract\\n * @dev OFT is an ERC-20 token that extends the functionality of the OFTCore contract.\\n */\\nabstract contract OFT is OFTCore, ERC20 {\\n    /**\\n     * @dev Constructor for the OFT contract.\\n     * @param _name The name of the OFT.\\n     * @param _symbol The symbol of the OFT.\\n     * @param _lzEndpoint The LayerZero endpoint address.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _lzEndpoint,\\n        address _delegate\\n    ) ERC20(_name, _symbol) OFTCore(decimals(), _lzEndpoint, _delegate) {}\\n\\n    /**\\n     * @dev Retrieves the address of the underlying ERC20 implementation.\\n     * @return The address of the OFT token.\\n     *\\n     * @dev In the case of OFT, address(this) and erc20 are the same contract.\\n     */\\n    function token() public view returns (address) {\\n        return address(this);\\n    }\\n\\n    /**\\n     * @notice Indicates whether the OFT contract requires approval of the 'token()' to send.\\n     * @return requiresApproval Needs approval of the underlying token implementation.\\n     *\\n     * @dev In the case of OFT where the contract IS the token, approval is NOT required.\\n     */\\n    function approvalRequired() external pure virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Burns tokens from the sender's specified balance.\\n     * @param _from The address to debit the tokens from.\\n     * @param _amountLD The amount of tokens to send in local decimals.\\n     * @param _minAmountLD The minimum amount to send in local decimals.\\n     * @param _dstEid The destination chain ID.\\n     * @return amountSentLD The amount sent in local decimals.\\n     * @return amountReceivedLD The amount received in local decimals on the remote.\\n     */\\n    function _debit(\\n        address _from,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        uint32 _dstEid\\n    ) internal virtual override returns (uint256 amountSentLD, uint256 amountReceivedLD) {\\n        (amountSentLD, amountReceivedLD) = _debitView(_amountLD, _minAmountLD, _dstEid);\\n\\n        // @dev In NON-default OFT, amountSentLD could be 100, with a 10% fee, the amountReceivedLD amount is 90,\\n        // therefore amountSentLD CAN differ from amountReceivedLD.\\n\\n        // @dev Default OFT burns on src.\\n        _burn(_from, amountSentLD);\\n    }\\n\\n    /**\\n     * @dev Credits tokens to the specified address.\\n     * @param _to The address to credit the tokens to.\\n     * @param _amountLD The amount of tokens to credit in local decimals.\\n     * @dev _srcEid The source chain ID.\\n     * @return amountReceivedLD The amount of tokens ACTUALLY received in local decimals.\\n     */\\n    function _credit(\\n        address _to,\\n        uint256 _amountLD,\\n        uint32 /*_srcEid*/\\n    ) internal virtual override returns (uint256 amountReceivedLD) {\\n        if (_to == address(0x0)) _to = address(0xdead); // _mint(...) does not support address(0x0)\\n        // @dev Default OFT mints on dst.\\n        _mint(_to, _amountLD);\\n        // @dev In the case of NON-default OFT, the _amountLD MIGHT not be == amountReceivedLD.\\n        return _amountLD;\\n    }\\n}\\n\",\"keccak256\":\"0xdc3582e4a20e02a79050c17058a1f1f42a4335d1a70be06c0a52a3fb05d4c89a\",\"license\":\"MIT\"},\"@layerzerolabs/oft-evm/contracts/OFTCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { OApp, Origin } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\\\";\\nimport { OAppOptionsType3 } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\\\";\\nimport { IOAppMsgInspector } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppMsgInspector.sol\\\";\\n\\nimport { OAppPreCrimeSimulator } from \\\"@layerzerolabs/oapp-evm/contracts/precrime/OAppPreCrimeSimulator.sol\\\";\\n\\nimport { IOFT, SendParam, OFTLimit, OFTReceipt, OFTFeeDetail, MessagingReceipt, MessagingFee } from \\\"./interfaces/IOFT.sol\\\";\\nimport { OFTMsgCodec } from \\\"./libs/OFTMsgCodec.sol\\\";\\nimport { OFTComposeMsgCodec } from \\\"./libs/OFTComposeMsgCodec.sol\\\";\\n\\n/**\\n * @title OFTCore\\n * @dev Abstract contract for the OftChain (OFT) token.\\n */\\nabstract contract OFTCore is IOFT, OApp, OAppPreCrimeSimulator, OAppOptionsType3 {\\n    using OFTMsgCodec for bytes;\\n    using OFTMsgCodec for bytes32;\\n\\n    // @notice Provides a conversion rate when swapping between denominations of SD and LD\\n    //      - shareDecimals == SD == shared Decimals\\n    //      - localDecimals == LD == local decimals\\n    // @dev Considers that tokens have different decimal amounts on various chains.\\n    // @dev eg.\\n    //  For a token\\n    //      - locally with 4 decimals --> 1.2345 => uint(12345)\\n    //      - remotely with 2 decimals --> 1.23 => uint(123)\\n    //      - The conversion rate would be 10 ** (4 - 2) = 100\\n    //  @dev If you want to send 1.2345 -> (uint 12345), you CANNOT represent that value on the remote,\\n    //  you can only display 1.23 -> uint(123).\\n    //  @dev To preserve the dust that would otherwise be lost on that conversion,\\n    //  we need to unify a denomination that can be represented on ALL chains inside of the OFT mesh\\n    uint256 public immutable decimalConversionRate;\\n\\n    // @notice Msg types that are used to identify the various OFT operations.\\n    // @dev This can be extended in child contracts for non-default oft operations\\n    // @dev These values are used in things like combineOptions() in OAppOptionsType3.sol.\\n    uint16 public constant SEND = 1;\\n    uint16 public constant SEND_AND_CALL = 2;\\n\\n    // Address of an optional contract to inspect both 'message' and 'options'\\n    address public msgInspector;\\n    event MsgInspectorSet(address inspector);\\n\\n    /**\\n     * @dev Constructor.\\n     * @param _localDecimals The decimals of the token on the local chain (this chain).\\n     * @param _endpoint The address of the LayerZero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(uint8 _localDecimals, address _endpoint, address _delegate) OApp(_endpoint, _delegate) {\\n        if (_localDecimals < sharedDecimals()) revert InvalidLocalDecimals();\\n        decimalConversionRate = 10 ** (_localDecimals - sharedDecimals());\\n    }\\n\\n    /**\\n     * @notice Retrieves interfaceID and the version of the OFT.\\n     * @return interfaceId The interface ID.\\n     * @return version The version.\\n     *\\n     * @dev interfaceId: This specific interface ID is '0x02e49c2c'.\\n     * @dev version: Indicates a cross-chain compatible msg encoding with other OFTs.\\n     * @dev If a new feature is added to the OFT cross-chain msg encoding, the version will be incremented.\\n     * ie. localOFT version(x,1) CAN send messages to remoteOFT version(x,1)\\n     */\\n    function oftVersion() external pure virtual returns (bytes4 interfaceId, uint64 version) {\\n        return (type(IOFT).interfaceId, 1);\\n    }\\n\\n    /**\\n     * @dev Retrieves the shared decimals of the OFT.\\n     * @return The shared decimals of the OFT.\\n     *\\n     * @dev Sets an implicit cap on the amount of tokens, over uint64.max() will need some sort of outbound cap / totalSupply cap\\n     * Lowest common decimal denominator between chains.\\n     * Defaults to 6 decimal places to provide up to 18,446,744,073,709.551615 units (max uint64).\\n     * For tokens exceeding this totalSupply(), they will need to override the sharedDecimals function with something smaller.\\n     * ie. 4 sharedDecimals would be 1,844,674,407,370,955.1615\\n     */\\n    function sharedDecimals() public view virtual returns (uint8) {\\n        return 6;\\n    }\\n\\n    /**\\n     * @dev Sets the message inspector address for the OFT.\\n     * @param _msgInspector The address of the message inspector.\\n     *\\n     * @dev This is an optional contract that can be used to inspect both 'message' and 'options'.\\n     * @dev Set it to address(0) to disable it, or set it to a contract address to enable it.\\n     */\\n    function setMsgInspector(address _msgInspector) public virtual onlyOwner {\\n        msgInspector = _msgInspector;\\n        emit MsgInspectorSet(_msgInspector);\\n    }\\n\\n    /**\\n     * @notice Provides the fee breakdown and settings data for an OFT. Unused in the default implementation.\\n     * @param _sendParam The parameters for the send operation.\\n     * @return oftLimit The OFT limit information.\\n     * @return oftFeeDetails The details of OFT fees.\\n     * @return oftReceipt The OFT receipt information.\\n     */\\n    function quoteOFT(\\n        SendParam calldata _sendParam\\n    )\\n        external\\n        view\\n        virtual\\n        returns (OFTLimit memory oftLimit, OFTFeeDetail[] memory oftFeeDetails, OFTReceipt memory oftReceipt)\\n    {\\n        uint256 minAmountLD = 0; // Unused in the default implementation.\\n        uint256 maxAmountLD = IERC20(this.token()).totalSupply(); // Unused in the default implementation.\\n        oftLimit = OFTLimit(minAmountLD, maxAmountLD);\\n\\n        // Unused in the default implementation; reserved for future complex fee details.\\n        oftFeeDetails = new OFTFeeDetail[](0);\\n\\n        // @dev This is the same as the send() operation, but without the actual send.\\n        // - amountSentLD is the amount in local decimals that would be sent from the sender.\\n        // - amountReceivedLD is the amount in local decimals that will be credited to the recipient on the remote OFT instance.\\n        // @dev The amountSentLD MIGHT not equal the amount the user actually receives. HOWEVER, the default does.\\n        (uint256 amountSentLD, uint256 amountReceivedLD) = _debitView(\\n            _sendParam.amountLD,\\n            _sendParam.minAmountLD,\\n            _sendParam.dstEid\\n        );\\n        oftReceipt = OFTReceipt(amountSentLD, amountReceivedLD);\\n    }\\n\\n    /**\\n     * @notice Provides a quote for the send() operation.\\n     * @param _sendParam The parameters for the send() operation.\\n     * @param _payInLzToken Flag indicating whether the caller is paying in the LZ token.\\n     * @return msgFee The calculated LayerZero messaging fee from the send() operation.\\n     *\\n     * @dev MessagingFee: LayerZero msg fee\\n     *  - nativeFee: The native fee.\\n     *  - lzTokenFee: The lzToken fee.\\n     */\\n    function quoteSend(\\n        SendParam calldata _sendParam,\\n        bool _payInLzToken\\n    ) external view virtual returns (MessagingFee memory msgFee) {\\n        // @dev mock the amount to receive, this is the same operation used in the send().\\n        // The quote is as similar as possible to the actual send() operation.\\n        (, uint256 amountReceivedLD) = _debitView(_sendParam.amountLD, _sendParam.minAmountLD, _sendParam.dstEid);\\n\\n        // @dev Builds the options and OFT message to quote in the endpoint.\\n        (bytes memory message, bytes memory options) = _buildMsgAndOptions(_sendParam, amountReceivedLD);\\n\\n        // @dev Calculates the LayerZero fee for the send() operation.\\n        return _quote(_sendParam.dstEid, message, options, _payInLzToken);\\n    }\\n\\n    /**\\n     * @dev Executes the send operation.\\n     * @param _sendParam The parameters for the send operation.\\n     * @param _fee The calculated fee for the send() operation.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess funds.\\n     * @return msgReceipt The receipt for the send operation.\\n     * @return oftReceipt The OFT receipt information.\\n     *\\n     * @dev MessagingReceipt: LayerZero msg receipt\\n     *  - guid: The unique identifier for the sent message.\\n     *  - nonce: The nonce of the sent message.\\n     *  - fee: The LayerZero fee incurred for the message.\\n     */\\n    function send(\\n        SendParam calldata _sendParam,\\n        MessagingFee calldata _fee,\\n        address _refundAddress\\n    ) external payable virtual returns (MessagingReceipt memory msgReceipt, OFTReceipt memory oftReceipt) {\\n        return _send(_sendParam, _fee, _refundAddress);\\n    }\\n\\n    /**\\n     * @dev Internal function to execute the send operation.\\n     * @param _sendParam The parameters for the send operation.\\n     * @param _fee The calculated fee for the send() operation.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess funds.\\n     * @return msgReceipt The receipt for the send operation.\\n     * @return oftReceipt The OFT receipt information.\\n     *\\n     * @dev MessagingReceipt: LayerZero msg receipt\\n     *  - guid: The unique identifier for the sent message.\\n     *  - nonce: The nonce of the sent message.\\n     *  - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _send(\\n        SendParam calldata _sendParam,\\n        MessagingFee calldata _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory msgReceipt, OFTReceipt memory oftReceipt) {\\n        // @dev Applies the token transfers regarding this send() operation.\\n        // - amountSentLD is the amount in local decimals that was ACTUALLY sent/debited from the sender.\\n        // - amountReceivedLD is the amount in local decimals that will be received/credited to the recipient on the remote OFT instance.\\n        (uint256 amountSentLD, uint256 amountReceivedLD) = _debit(\\n            msg.sender,\\n            _sendParam.amountLD,\\n            _sendParam.minAmountLD,\\n            _sendParam.dstEid\\n        );\\n\\n        // @dev Builds the options and OFT message to quote in the endpoint.\\n        (bytes memory message, bytes memory options) = _buildMsgAndOptions(_sendParam, amountReceivedLD);\\n\\n        // @dev Sends the message to the LayerZero endpoint and returns the LayerZero msg receipt.\\n        msgReceipt = _lzSend(_sendParam.dstEid, message, options, _fee, _refundAddress);\\n        // @dev Formulate the OFT receipt.\\n        oftReceipt = OFTReceipt(amountSentLD, amountReceivedLD);\\n\\n        emit OFTSent(msgReceipt.guid, _sendParam.dstEid, msg.sender, amountSentLD, amountReceivedLD);\\n    }\\n\\n    /**\\n     * @dev Internal function to build the message and options.\\n     * @param _sendParam The parameters for the send() operation.\\n     * @param _amountLD The amount in local decimals.\\n     * @return message The encoded message.\\n     * @return options The encoded options.\\n     */\\n    function _buildMsgAndOptions(\\n        SendParam calldata _sendParam,\\n        uint256 _amountLD\\n    ) internal view virtual returns (bytes memory message, bytes memory options) {\\n        bool hasCompose;\\n        // @dev This generated message has the msg.sender encoded into the payload so the remote knows who the caller is.\\n        (message, hasCompose) = OFTMsgCodec.encode(\\n            _sendParam.to,\\n            _toSD(_amountLD),\\n            // @dev Must be include a non empty bytes if you want to compose, EVEN if you dont need it on the remote.\\n            // EVEN if you dont require an arbitrary payload to be sent... eg. '0x01'\\n            _sendParam.composeMsg\\n        );\\n        // @dev Change the msg type depending if its composed or not.\\n        uint16 msgType = hasCompose ? SEND_AND_CALL : SEND;\\n        // @dev Combine the callers _extraOptions with the enforced options via the OAppOptionsType3.\\n        options = combineOptions(_sendParam.dstEid, msgType, _sendParam.extraOptions);\\n\\n        // @dev Optionally inspect the message and options depending if the OApp owner has set a msg inspector.\\n        // @dev If it fails inspection, needs to revert in the implementation. ie. does not rely on return boolean\\n        address inspector = msgInspector; // caches the msgInspector to avoid potential double storage read\\n        if (inspector != address(0)) IOAppMsgInspector(inspector).inspect(message, options);\\n    }\\n\\n    /**\\n     * @dev Internal function to handle the receive on the LayerZero endpoint.\\n     * @param _origin The origin information.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address from the src chain.\\n     *  - nonce: The nonce of the LayerZero message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The encoded message.\\n     * @dev _executor The address of the executor.\\n     * @dev _extraData Additional data.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address /*_executor*/, // @dev unused in the default implementation.\\n        bytes calldata /*_extraData*/ // @dev unused in the default implementation.\\n    ) internal virtual override {\\n        // @dev The src sending chain doesnt know the address length on this chain (potentially non-evm)\\n        // Thus everything is bytes32() encoded in flight.\\n        address toAddress = _message.sendTo().bytes32ToAddress();\\n        // @dev Credit the amountLD to the recipient and return the ACTUAL amount the recipient received in local decimals\\n        uint256 amountReceivedLD = _credit(toAddress, _toLD(_message.amountSD()), _origin.srcEid);\\n\\n        if (_message.isComposed()) {\\n            // @dev Proprietary composeMsg format for the OFT.\\n            bytes memory composeMsg = OFTComposeMsgCodec.encode(\\n                _origin.nonce,\\n                _origin.srcEid,\\n                amountReceivedLD,\\n                _message.composeMsg()\\n            );\\n\\n            // @dev Stores the lzCompose payload that will be executed in a separate tx.\\n            // Standardizes functionality for executing arbitrary contract invocation on some non-evm chains.\\n            // @dev The off-chain executor will listen and process the msg based on the src-chain-callers compose options passed.\\n            // @dev The index is used when a OApp needs to compose multiple msgs on lzReceive.\\n            // For default OFT implementation there is only 1 compose msg per lzReceive, thus its always 0.\\n            endpoint.sendCompose(toAddress, _guid, 0 /* the index of the composed message*/, composeMsg);\\n        }\\n\\n        emit OFTReceived(_guid, _origin.srcEid, toAddress, amountReceivedLD);\\n    }\\n\\n    /**\\n     * @dev Internal function to handle the OAppPreCrimeSimulator simulated receive.\\n     * @param _origin The origin information.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address from the src chain.\\n     *  - nonce: The nonce of the LayerZero message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The LayerZero message.\\n     * @param _executor The address of the off-chain executor.\\n     * @param _extraData Arbitrary data passed by the msg executor.\\n     *\\n     * @dev Enables the preCrime simulator to mock sending lzReceive() messages,\\n     * routes the msg down from the OAppPreCrimeSimulator, and back up to the OAppReceiver.\\n     */\\n    function _lzReceiveSimulate(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual override {\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Check if the peer is considered 'trusted' by the OApp.\\n     * @param _eid The endpoint ID to check.\\n     * @param _peer The peer to check.\\n     * @return Whether the peer passed is considered 'trusted' by the OApp.\\n     *\\n     * @dev Enables OAppPreCrimeSimulator to check whether a potential Inbound Packet is from a trusted source.\\n     */\\n    function isPeer(uint32 _eid, bytes32 _peer) public view virtual override returns (bool) {\\n        return peers[_eid] == _peer;\\n    }\\n\\n    /**\\n     * @dev Internal function to remove dust from the given local decimal amount.\\n     * @param _amountLD The amount in local decimals.\\n     * @return amountLD The amount after removing dust.\\n     *\\n     * @dev Prevents the loss of dust when moving amounts between chains with different decimals.\\n     * @dev eg. uint(123) with a conversion rate of 100 becomes uint(100).\\n     */\\n    function _removeDust(uint256 _amountLD) internal view virtual returns (uint256 amountLD) {\\n        return (_amountLD / decimalConversionRate) * decimalConversionRate;\\n    }\\n\\n    /**\\n     * @dev Internal function to convert an amount from shared decimals into local decimals.\\n     * @param _amountSD The amount in shared decimals.\\n     * @return amountLD The amount in local decimals.\\n     */\\n    function _toLD(uint64 _amountSD) internal view virtual returns (uint256 amountLD) {\\n        return _amountSD * decimalConversionRate;\\n    }\\n\\n    /**\\n     * @dev Internal function to convert an amount from local decimals into shared decimals.\\n     * @param _amountLD The amount in local decimals.\\n     * @return amountSD The amount in shared decimals.\\n     */\\n    function _toSD(uint256 _amountLD) internal view virtual returns (uint64 amountSD) {\\n        return uint64(_amountLD / decimalConversionRate);\\n    }\\n\\n    /**\\n     * @dev Internal function to mock the amount mutation from a OFT debit() operation.\\n     * @param _amountLD The amount to send in local decimals.\\n     * @param _minAmountLD The minimum amount to send in local decimals.\\n     * @dev _dstEid The destination endpoint ID.\\n     * @return amountSentLD The amount sent, in local decimals.\\n     * @return amountReceivedLD The amount to be received on the remote chain, in local decimals.\\n     *\\n     * @dev This is where things like fees would be calculated and deducted from the amount to be received on the remote.\\n     */\\n    function _debitView(\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        uint32 /*_dstEid*/\\n    ) internal view virtual returns (uint256 amountSentLD, uint256 amountReceivedLD) {\\n        // @dev Remove the dust so nothing is lost on the conversion between chains with different decimals for the token.\\n        amountSentLD = _removeDust(_amountLD);\\n        // @dev The amount to send is the same as amount received in the default implementation.\\n        amountReceivedLD = amountSentLD;\\n\\n        // @dev Check for slippage.\\n        if (amountReceivedLD < _minAmountLD) {\\n            revert SlippageExceeded(amountReceivedLD, _minAmountLD);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to perform a debit operation.\\n     * @param _from The address to debit.\\n     * @param _amountLD The amount to send in local decimals.\\n     * @param _minAmountLD The minimum amount to send in local decimals.\\n     * @param _dstEid The destination endpoint ID.\\n     * @return amountSentLD The amount sent in local decimals.\\n     * @return amountReceivedLD The amount received in local decimals on the remote.\\n     *\\n     * @dev Defined here but are intended to be overriden depending on the OFT implementation.\\n     * @dev Depending on OFT implementation the _amountLD could differ from the amountReceivedLD.\\n     */\\n    function _debit(\\n        address _from,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        uint32 _dstEid\\n    ) internal virtual returns (uint256 amountSentLD, uint256 amountReceivedLD);\\n\\n    /**\\n     * @dev Internal function to perform a credit operation.\\n     * @param _to The address to credit.\\n     * @param _amountLD The amount to credit in local decimals.\\n     * @param _srcEid The source endpoint ID.\\n     * @return amountReceivedLD The amount ACTUALLY received in local decimals.\\n     *\\n     * @dev Defined here but are intended to be overriden depending on the OFT implementation.\\n     * @dev Depending on OFT implementation the _amountLD could differ from the amountReceivedLD.\\n     */\\n    function _credit(\\n        address _to,\\n        uint256 _amountLD,\\n        uint32 _srcEid\\n    ) internal virtual returns (uint256 amountReceivedLD);\\n}\\n\",\"keccak256\":\"0x4c5a5412cf671bb70d84c9e783312eddf864ef56566f7bf86401c5661015e228\",\"license\":\"MIT\"},\"@layerzerolabs/oft-evm/contracts/interfaces/IOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { MessagingReceipt, MessagingFee } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\\\";\\n\\n/**\\n * @dev Struct representing token parameters for the OFT send() operation.\\n */\\nstruct SendParam {\\n    uint32 dstEid; // Destination endpoint ID.\\n    bytes32 to; // Recipient address.\\n    uint256 amountLD; // Amount to send in local decimals.\\n    uint256 minAmountLD; // Minimum amount to send in local decimals.\\n    bytes extraOptions; // Additional options supplied by the caller to be used in the LayerZero message.\\n    bytes composeMsg; // The composed message for the send() operation.\\n    bytes oftCmd; // The OFT command to be executed, unused in default OFT implementations.\\n}\\n\\n/**\\n * @dev Struct representing OFT limit information.\\n * @dev These amounts can change dynamically and are up the specific oft implementation.\\n */\\nstruct OFTLimit {\\n    uint256 minAmountLD; // Minimum amount in local decimals that can be sent to the recipient.\\n    uint256 maxAmountLD; // Maximum amount in local decimals that can be sent to the recipient.\\n}\\n\\n/**\\n * @dev Struct representing OFT receipt information.\\n */\\nstruct OFTReceipt {\\n    uint256 amountSentLD; // Amount of tokens ACTUALLY debited from the sender in local decimals.\\n    // @dev In non-default implementations, the amountReceivedLD COULD differ from this value.\\n    uint256 amountReceivedLD; // Amount of tokens to be received on the remote side.\\n}\\n\\n/**\\n * @dev Struct representing OFT fee details.\\n * @dev Future proof mechanism to provide a standardized way to communicate fees to things like a UI.\\n */\\nstruct OFTFeeDetail {\\n    int256 feeAmountLD; // Amount of the fee in local decimals.\\n    string description; // Description of the fee.\\n}\\n\\n/**\\n * @title IOFT\\n * @dev Interface for the OftChain (OFT) token.\\n * @dev Does not inherit ERC20 to accommodate usage by OFTAdapter as well.\\n * @dev This specific interface ID is '0x02e49c2c'.\\n */\\ninterface IOFT {\\n    // Custom error messages\\n    error InvalidLocalDecimals();\\n    error SlippageExceeded(uint256 amountLD, uint256 minAmountLD);\\n\\n    // Events\\n    event OFTSent(\\n        bytes32 indexed guid, // GUID of the OFT message.\\n        uint32 dstEid, // Destination Endpoint ID.\\n        address indexed fromAddress, // Address of the sender on the src chain.\\n        uint256 amountSentLD, // Amount of tokens sent in local decimals.\\n        uint256 amountReceivedLD // Amount of tokens received in local decimals.\\n    );\\n    event OFTReceived(\\n        bytes32 indexed guid, // GUID of the OFT message.\\n        uint32 srcEid, // Source Endpoint ID.\\n        address indexed toAddress, // Address of the recipient on the dst chain.\\n        uint256 amountReceivedLD // Amount of tokens received in local decimals.\\n    );\\n\\n    /**\\n     * @notice Retrieves interfaceID and the version of the OFT.\\n     * @return interfaceId The interface ID.\\n     * @return version The version.\\n     *\\n     * @dev interfaceId: This specific interface ID is '0x02e49c2c'.\\n     * @dev version: Indicates a cross-chain compatible msg encoding with other OFTs.\\n     * @dev If a new feature is added to the OFT cross-chain msg encoding, the version will be incremented.\\n     * ie. localOFT version(x,1) CAN send messages to remoteOFT version(x,1)\\n     */\\n    function oftVersion() external view returns (bytes4 interfaceId, uint64 version);\\n\\n    /**\\n     * @notice Retrieves the address of the token associated with the OFT.\\n     * @return token The address of the ERC20 token implementation.\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @notice Indicates whether the OFT contract requires approval of the 'token()' to send.\\n     * @return requiresApproval Needs approval of the underlying token implementation.\\n     *\\n     * @dev Allows things like wallet implementers to determine integration requirements,\\n     * without understanding the underlying token implementation.\\n     */\\n    function approvalRequired() external view returns (bool);\\n\\n    /**\\n     * @notice Retrieves the shared decimals of the OFT.\\n     * @return sharedDecimals The shared decimals of the OFT.\\n     */\\n    function sharedDecimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Provides the fee breakdown and settings data for an OFT. Unused in the default implementation.\\n     * @param _sendParam The parameters for the send operation.\\n     * @return limit The OFT limit information.\\n     * @return oftFeeDetails The details of OFT fees.\\n     * @return receipt The OFT receipt information.\\n     */\\n    function quoteOFT(\\n        SendParam calldata _sendParam\\n    ) external view returns (OFTLimit memory, OFTFeeDetail[] memory oftFeeDetails, OFTReceipt memory);\\n\\n    /**\\n     * @notice Provides a quote for the send() operation.\\n     * @param _sendParam The parameters for the send() operation.\\n     * @param _payInLzToken Flag indicating whether the caller is paying in the LZ token.\\n     * @return fee The calculated LayerZero messaging fee from the send() operation.\\n     *\\n     * @dev MessagingFee: LayerZero msg fee\\n     *  - nativeFee: The native fee.\\n     *  - lzTokenFee: The lzToken fee.\\n     */\\n    function quoteSend(SendParam calldata _sendParam, bool _payInLzToken) external view returns (MessagingFee memory);\\n\\n    /**\\n     * @notice Executes the send() operation.\\n     * @param _sendParam The parameters for the send operation.\\n     * @param _fee The fee information supplied by the caller.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess funds from fees etc. on the src.\\n     * @return receipt The LayerZero messaging receipt from the send() operation.\\n     * @return oftReceipt The OFT receipt information.\\n     *\\n     * @dev MessagingReceipt: LayerZero msg receipt\\n     *  - guid: The unique identifier for the sent message.\\n     *  - nonce: The nonce of the sent message.\\n     *  - fee: The LayerZero fee incurred for the message.\\n     */\\n    function send(\\n        SendParam calldata _sendParam,\\n        MessagingFee calldata _fee,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory, OFTReceipt memory);\\n}\\n\",\"keccak256\":\"0x7ba6bb62fba7ee83451cfb0e727ddeef0e96b4388bd4e9ff0fc6ce103e1101c8\",\"license\":\"MIT\"},\"@layerzerolabs/oft-evm/contracts/libs/OFTComposeMsgCodec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nlibrary OFTComposeMsgCodec {\\n    // Offset constants for decoding composed messages\\n    uint8 private constant NONCE_OFFSET = 8;\\n    uint8 private constant SRC_EID_OFFSET = 12;\\n    uint8 private constant AMOUNT_LD_OFFSET = 44;\\n    uint8 private constant COMPOSE_FROM_OFFSET = 76;\\n\\n    /**\\n     * @dev Encodes a OFT composed message.\\n     * @param _nonce The nonce value.\\n     * @param _srcEid The source endpoint ID.\\n     * @param _amountLD The amount in local decimals.\\n     * @param _composeMsg The composed message.\\n     * @return _msg The encoded Composed message.\\n     */\\n    function encode(\\n        uint64 _nonce,\\n        uint32 _srcEid,\\n        uint256 _amountLD,\\n        bytes memory _composeMsg // 0x[composeFrom][composeMsg]\\n    ) internal pure returns (bytes memory _msg) {\\n        _msg = abi.encodePacked(_nonce, _srcEid, _amountLD, _composeMsg);\\n    }\\n\\n    /**\\n     * @dev Retrieves the nonce for the composed message.\\n     * @param _msg The message.\\n     * @return The nonce value.\\n     */\\n    function nonce(bytes calldata _msg) internal pure returns (uint64) {\\n        return uint64(bytes8(_msg[:NONCE_OFFSET]));\\n    }\\n\\n    /**\\n     * @dev Retrieves the source endpoint ID for the composed message.\\n     * @param _msg The message.\\n     * @return The source endpoint ID.\\n     */\\n    function srcEid(bytes calldata _msg) internal pure returns (uint32) {\\n        return uint32(bytes4(_msg[NONCE_OFFSET:SRC_EID_OFFSET]));\\n    }\\n\\n    /**\\n     * @dev Retrieves the amount in local decimals from the composed message.\\n     * @param _msg The message.\\n     * @return The amount in local decimals.\\n     */\\n    function amountLD(bytes calldata _msg) internal pure returns (uint256) {\\n        return uint256(bytes32(_msg[SRC_EID_OFFSET:AMOUNT_LD_OFFSET]));\\n    }\\n\\n    /**\\n     * @dev Retrieves the composeFrom value from the composed message.\\n     * @param _msg The message.\\n     * @return The composeFrom value.\\n     */\\n    function composeFrom(bytes calldata _msg) internal pure returns (bytes32) {\\n        return bytes32(_msg[AMOUNT_LD_OFFSET:COMPOSE_FROM_OFFSET]);\\n    }\\n\\n    /**\\n     * @dev Retrieves the composed message.\\n     * @param _msg The message.\\n     * @return The composed message.\\n     */\\n    function composeMsg(bytes calldata _msg) internal pure returns (bytes memory) {\\n        return _msg[COMPOSE_FROM_OFFSET:];\\n    }\\n\\n    /**\\n     * @dev Converts an address to bytes32.\\n     * @param _addr The address to convert.\\n     * @return The bytes32 representation of the address.\\n     */\\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_addr)));\\n    }\\n\\n    /**\\n     * @dev Converts bytes32 to an address.\\n     * @param _b The bytes32 value to convert.\\n     * @return The address representation of bytes32.\\n     */\\n    function bytes32ToAddress(bytes32 _b) internal pure returns (address) {\\n        return address(uint160(uint256(_b)));\\n    }\\n}\\n\",\"keccak256\":\"0xaae73d6eb8b9561c43f1802f3c416c00ccd35f172b711f9781ccdf1b25a40db5\",\"license\":\"MIT\"},\"@layerzerolabs/oft-evm/contracts/libs/OFTMsgCodec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nlibrary OFTMsgCodec {\\n    // Offset constants for encoding and decoding OFT messages\\n    uint8 private constant SEND_TO_OFFSET = 32;\\n    uint8 private constant SEND_AMOUNT_SD_OFFSET = 40;\\n\\n    /**\\n     * @dev Encodes an OFT LayerZero message.\\n     * @param _sendTo The recipient address.\\n     * @param _amountShared The amount in shared decimals.\\n     * @param _composeMsg The composed message.\\n     * @return _msg The encoded message.\\n     * @return hasCompose A boolean indicating whether the message has a composed payload.\\n     */\\n    function encode(\\n        bytes32 _sendTo,\\n        uint64 _amountShared,\\n        bytes memory _composeMsg\\n    ) internal view returns (bytes memory _msg, bool hasCompose) {\\n        hasCompose = _composeMsg.length > 0;\\n        // @dev Remote chains will want to know the composed function caller ie. msg.sender on the src.\\n        _msg = hasCompose\\n            ? abi.encodePacked(_sendTo, _amountShared, addressToBytes32(msg.sender), _composeMsg)\\n            : abi.encodePacked(_sendTo, _amountShared);\\n    }\\n\\n    /**\\n     * @dev Checks if the OFT message is composed.\\n     * @param _msg The OFT message.\\n     * @return A boolean indicating whether the message is composed.\\n     */\\n    function isComposed(bytes calldata _msg) internal pure returns (bool) {\\n        return _msg.length > SEND_AMOUNT_SD_OFFSET;\\n    }\\n\\n    /**\\n     * @dev Retrieves the recipient address from the OFT message.\\n     * @param _msg The OFT message.\\n     * @return The recipient address.\\n     */\\n    function sendTo(bytes calldata _msg) internal pure returns (bytes32) {\\n        return bytes32(_msg[:SEND_TO_OFFSET]);\\n    }\\n\\n    /**\\n     * @dev Retrieves the amount in shared decimals from the OFT message.\\n     * @param _msg The OFT message.\\n     * @return The amount in shared decimals.\\n     */\\n    function amountSD(bytes calldata _msg) internal pure returns (uint64) {\\n        return uint64(bytes8(_msg[SEND_TO_OFFSET:SEND_AMOUNT_SD_OFFSET]));\\n    }\\n\\n    /**\\n     * @dev Retrieves the composed message from the OFT message.\\n     * @param _msg The OFT message.\\n     * @return The composed message.\\n     */\\n    function composeMsg(bytes calldata _msg) internal pure returns (bytes memory) {\\n        return _msg[SEND_AMOUNT_SD_OFFSET:];\\n    }\\n\\n    /**\\n     * @dev Converts an address to bytes32.\\n     * @param _addr The address to convert.\\n     * @return The bytes32 representation of the address.\\n     */\\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_addr)));\\n    }\\n\\n    /**\\n     * @dev Converts bytes32 to an address.\\n     * @param _b The bytes32 value to convert.\\n     * @return The address representation of bytes32.\\n     */\\n    function bytes32ToAddress(bytes32 _b) internal pure returns (address) {\\n        return address(uint160(uint256(_b)));\\n    }\\n}\\n\",\"keccak256\":\"0x5358948017669c03e157f871d8c38e988f9004dbd0801ad3119d2487f0d40b0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ef9389a2c07bc40d8a7ba48914724ab2c108fac391ce12314f01321813e6368\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Token} from \\\"./Token.sol\\\";\\nimport \\\"./NativeLiquidityPool.sol\\\";\\nimport { OApp, Origin, MessagingFee } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Factory is OApp {\\n    uint256 public constant TARGET = 3 ether;\\n    uint256 public constant TOKEN_LIMIT = 500_000 ether;\\n    uint256 public constant BASE_REWARD_PERCENTAGE = 3; // 3% reward\\n    \\n    // Pack related variables together to save gas\\n    uint256 public immutable fee;\\n    uint256 public totalTokens;\\n    address public immutable lzEndpoint;\\n    NativeLiquidityPool public nativeLiquidityPool;\\n\\n    address[] public tokens;\\n    //mapping(string => address) public tokenBySymbol;\\n    mapping(address => TokenSale) public tokenToSale;\\n    mapping(address => mapping(address => uint256)) public userTokenContributions;\\n    mapping(address => mapping(address => uint256)) public userEthContributions;\\n    mapping(address => mapping(address => bool)) public hasClaimedReward;\\n    mapping(address => address[]) public tokenContributors;\\n\\n    struct TokenSale {\\n        address token;\\n        string name;\\n        string metadataURI;\\n        address creator;\\n        uint256 sold;\\n        uint256 raised;\\n        bool isOpen;\\n        bool isLiquidityCreated;\\n    }\\n\\n    constructor(uint256 _fee, address _lzEndpoint) OApp(_lzEndpoint, msg.sender) Ownable(msg.sender) {\\n        fee = _fee;\\n        lzEndpoint = _lzEndpoint;\\n    }\\n\\n    function setLiquidityPool(address _liquidityPool) external onlyOwner {\\n        nativeLiquidityPool = NativeLiquidityPool(_liquidityPool);\\n    }\\n\\n    function create(\\n        string calldata _name, \\n        string calldata _symbol,\\n        string calldata _metadataURI,\\n        address _creator\\n    ) external payable {\\n        require(msg.value >= fee, \\\"!fee\\\");\\n        //require(tokenBySymbol[_symbol] == address(0), \\\"Token with this symbol already exists\\\");\\n        // Default to msg.sender if _creator is zero address\\n        if (_creator == address(0)) {\\n            _creator = msg.sender;\\n        }\\n\\n        Token token = new Token(_creator, _name, _symbol, _metadataURI, 1_000_000 ether, lzEndpoint);\\n        tokens.push(address(token));\\n        totalTokens++;\\n\\n        TokenSale memory sale = TokenSale(address(token), _name, _metadataURI, _creator, 0, 0, true, false);\\n        tokenToSale[address(token)] = sale;\\n    }\\n\\n    function buy(address _token, uint256 _amount) external payable {\\n        TokenSale storage sale = tokenToSale[_token];\\n        require(sale.token != address(0) && sale.isOpen, \\\"!available\\\");\\n        require(_amount >= 1 ether && _amount <= 10000 ether, \\\"!amount\\\");\\n        \\n        uint256 price = getCost(sale.sold) * (_amount / 1e18);\\n        require(msg.value >= price, \\\"!price\\\");\\n\\n        // Record the contribution\\n        if (userTokenContributions[_token][msg.sender] == 0) {\\n            tokenContributors[_token].push(msg.sender); // Store unique contributors\\n        }\\n        userTokenContributions[_token][msg.sender] += _amount;\\n        userEthContributions[_token][msg.sender] += msg.value;\\n        \\n        // transfer tokens to the buyer's wallet\\n        Token(_token).transfer(msg.sender, _amount);\\n        \\n        // Update the sale\\n        sale.sold += _amount;\\n        sale.raised += msg.value;\\n        // Make sure fund raising goal isn't met, since if its met we don't want people to keep buy tokens\\n        if (sale.sold >= TOKEN_LIMIT || sale.raised >= TARGET){\\n            sale.isOpen = false;\\n            if (!sale.isLiquidityCreated){\\n                triggerLiquidityCreation(_token);\\n                sale.isLiquidityCreated = true;\\n            }\\n        }\\n    }\\n\\n    function triggerLiquidityCreation(address _token) internal {\\n        TokenSale storage sale = tokenToSale[_token];\\n        require(!sale.isLiquidityCreated, \\\"!liquidity\\\"); \\n        Token memeTokenCt = Token(_token);\\n        uint256 tokenBalance = memeTokenCt.balanceOf(address(this));\\n\\n        (address[] memory contributors, uint256[] memory contributorAmounts) = getContributors(_token);\\n\\n        memeTokenCt.approve(address(nativeLiquidityPool), tokenBalance);\\n        nativeLiquidityPool.addLiquidity{value: sale.raised}(_token, tokenBalance, contributors, contributorAmounts);\\n    }\\n\\n    function calculateReward(address _token, address user) internal view returns (uint256) {\\n        if (!tokenToSale[_token].isLiquidityCreated || \\n            hasClaimedReward[_token][user] ||\\n            userTokenContributions[_token][user] == 0) {\\n            return 0;\\n        }\\n\\n        uint256 userTokens = userTokenContributions[_token][user];\\n        TokenSale storage sale = tokenToSale[_token];\\n        return (sale.raised * BASE_REWARD_PERCENTAGE * userTokens) / (sale.sold * 100);\\n    }\\n \\n    function claimReward(address _token) public {\\n        require(tokenToSale[_token].isLiquidityCreated, \\\"!liquidity\\\");\\n        require(!hasClaimedReward[_token][msg.sender], \\\"Already claimed!\\\");\\n        require(userTokenContributions[_token][msg.sender] > 0, \\\"!contribution\\\");\\n\\n        uint256 reward = calculateReward(_token, msg.sender);\\n        require(reward > 0, \\\"!reward\\\");\\n\\n        hasClaimedReward[_token][msg.sender] = true; \\n        Token(_token).mint(msg.sender, reward); // distribute token to LPs\\n\\n    }\\n\\n    function withdraw(uint256 _amount) external onlyOwner{\\n        (bool success, ) = payable(owner()).call{value: _amount}(\\\"\\\");\\n        require(success, \\\"!transfer\\\");\\n    }\\n    \\n    function getTokenSale(uint256 _index) external view returns (TokenSale memory){\\n        require(_index < tokens.length, \\\"!index\\\");\\n        return tokenToSale[tokens[_index]];\\n    }\\n\\n    function getCost(uint256 _sold) internal pure returns(uint256){\\n        uint256 floor = 0.0001 ether; // starting price of a token\\n        uint256 step = 0.0001 ether; // each time increase by this amount in price\\n        uint256 increment = 10000 ether;\\n\\n        uint256 cost = (step * (_sold / increment)) + floor;\\n        return cost;\\n    }\\n\\n    function getContributors(address _token) internal view returns (address[] memory, uint256[] memory){\\n        address[] memory contributors = tokenContributors[_token];\\n        uint256[] memory contributions = new uint256[](contributors.length);\\n\\n        for (uint256 i = 0; i < contributors.length; i++) {\\n            contributions[i] = userEthContributions[_token][contributors[i]];\\n        }\\n\\n        return (contributors, contributions);\\n    }\\n\\n    function getPriceForTokens(address _token, uint256 _amount) public view returns (uint256) {\\n        TokenSale storage sale = tokenToSale[_token];\\n        require(_amount >= 1 ether && _amount <= 10000 ether, \\\"!amount\\\");\\n        require(sale.isOpen, \\\"!available\\\");\\n\\n        return getCost(sale.sold) * (_amount / 10 ** 18);\\n    }\\n\\n    // function getTokenBySymbol(string memory _symbol) public view returns (address) {\\n    //     return tokenBySymbol[_symbol];\\n    // }\\n\\n    function sendLaunchToRemoteChain(\\n        uint32 dstEid,\\n        string calldata _name,\\n        string calldata _symbol,\\n        string calldata _metadataURI,\\n        address _creator,\\n        bytes memory options\\n    ) external payable {\\n        bytes memory payload = abi.encode(_name, _symbol, _metadataURI, _creator);\\n        _lzSend(dstEid, payload, options, MessagingFee(msg.value, 0), payable(msg.sender));\\n    }\\n\\n    function _lzReceive(\\n        Origin calldata, // not needed for now\\n        bytes32,         // guid\\n        bytes calldata payload,\\n        address,         // executor\\n        bytes calldata   // extra data\\n    ) internal override {\\n        (\\n            string memory _name, \\n            string memory _symbol, \\n            string memory _metadataURI, \\n            address _creator\\n        ) = abi.decode(payload, (string, string, string, address));\\n        \\n        _createCrossChainToken(_name, _symbol, _metadataURI, _creator);\\n    }\\n\\n    function _createCrossChainToken(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _metadataURI,\\n        address _creator\\n    ) internal {\\n        Token token = new Token(_creator, _name, _symbol, _metadataURI, 1_000_000 ether, lzEndpoint);\\n        tokens.push(address(token));\\n        totalTokens++;\\n        tokenToSale[address(token)] = TokenSale(address(token), _name, _metadataURI, _creator, 0, 0, true, false);\\n    }\\n\\n} \",\"keccak256\":\"0x422f9c9f41a24419bf4da9e6049264dd7c36342ad0b932534b30f76023071476\",\"license\":\"MIT\"},\"contracts/NativeLiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Token.sol\\\";\\nimport \\\"./Factory.sol\\\";\\n\\ncontract NativeLiquidityPool {\\n    address public factory;\\n    uint256 public vestingPeriod;\\n \\n    // Track liquidity providers for each token\\n    mapping(address => uint256) public liquidity;\\n    mapping(address => mapping(address => uint256)) public userLiquidity;\\n    mapping(address => mapping(address => uint256)) public liquidityDepositTime;\\n\\n    event LiquidityAdded(address indexed tokenAddress, address indexed provider, uint256 tokenAmount, uint256 avaxAmount);\\n    event LiquidityRemoved(address indexed token, address indexed provider, uint256 tokenAmount, uint256 ethAmount);\\n\\n    constructor(address _factory) {\\n        require(_factory != address(0), \\\"Invalid factory\\\");\\n        factory = _factory;\\n        vestingPeriod = 604800; // Default vesting period: 1 week (in seconds)\\n    }\\n    \\n    function setVestingPeriod(uint256 _vestingPeriod) external {\\n        require(msg.sender == factory, \\\"Only factory can set vesting period\\\");\\n        vestingPeriod = _vestingPeriod;\\n    }\\n\\n    function addLiquidity(address _tokenAddress, uint256 tokenAmount, address[] memory contributors, uint256[] memory contributorAmounts) external payable {\\n        require(msg.value > 0, \\\"Must provide ETH\\\");\\n        require(tokenAmount > 0, \\\"Must provide tokens\\\");\\n\\n        Token token = Token(_tokenAddress);\\n        require(token.transferFrom(msg.sender, address(this), tokenAmount), \\\"Transfer failed\\\");\\n        if(msg.sender == factory){\\n            for (uint256 i = 0; i < contributors.length; i++) {\\n                userLiquidity[_tokenAddress][contributors[i]] += contributorAmounts[i];\\n                liquidityDepositTime[_tokenAddress][contributors[i]] = block.timestamp;\\n            }\\n        } else {\\n            userLiquidity[_tokenAddress][msg.sender] += msg.value;\\n            liquidityDepositTime[_tokenAddress][msg.sender] = block.timestamp;\\n        }\\n        liquidity[_tokenAddress] += msg.value;\\n        emit LiquidityAdded(_tokenAddress, msg.sender, tokenAmount, msg.value);\\n    }\\n\\n    function removeLiquidity(address _tokenAddress, uint256 liquidityAmount) external {\\n        // withdraw eth from the liquidity\\n        require(userLiquidity[_tokenAddress][msg.sender] >= liquidityAmount, \\\"Insufficient liquidity\\\");\\n        require(block.timestamp >= liquidityDepositTime[_tokenAddress][msg.sender] + vestingPeriod, \\\"Liquidity is still locked\\\");\\n        \\n        Token token = Token(_tokenAddress);\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        uint256 ethReserve = liquidity[_tokenAddress];\\n\\n        uint256 ethOut = (liquidityAmount * ethReserve) / liquidity[_tokenAddress]; // uint256 ethOut = liquidityAmount;\\n        uint256 tokenOut = (liquidityAmount * tokenReserve) / liquidity[_tokenAddress];\\n\\n        require(ethOut > 0 && tokenOut > 0, \\\"Insufficient withdrawal amount\\\");\\n\\n        userLiquidity[_tokenAddress][msg.sender] -= liquidityAmount;\\n        liquidity[_tokenAddress] -= ethOut; // liquidity[_tokenAddress] -= liquidityAmount;\\n\\n        (bool success, ) = payable(msg.sender).call{value: ethOut}(\\\"\\\");\\n        require(success, \\\"ETH transfer failed\\\");\\n        require(token.transfer(msg.sender, tokenOut), \\\"Token transfer failed\\\");\\n\\n        emit LiquidityRemoved(_tokenAddress, msg.sender, tokenOut, ethOut);\\n    }\\n\\n    function swapEthForToken(address _tokenAddress) external payable {\\n        require(msg.value > 0, \\\"Must provide ETH\\\");\\n\\n        Token token = Token(_tokenAddress);\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        uint256 ethReserve = liquidity[_tokenAddress];\\n\\n        uint256 tokensOut = (msg.value * tokenReserve)/ (ethReserve + msg.value);\\n        require(tokensOut > 0, \\\"Insufficient output amount\\\");\\n        require(token.transfer(msg.sender, tokensOut), \\\"Token transfer failed\\\");\\n\\n        liquidity[_tokenAddress] += msg.value;\\n    }\\n\\n    function swapTokenForEth(address _tokenAddress, uint256 _tokenAmount) external {\\n        require(_tokenAddress != address(0), \\\"Invalid address\\\");\\n\\n        Token token = Token(_tokenAddress);\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        uint256 ethReserve = liquidity[_tokenAddress];\\n\\n        uint256 ethOut = (_tokenAmount * ethReserve) / (tokenReserve + _tokenAmount);\\n        require(ethOut > 0, \\\"Insufficient output amount\\\");\\n        require(token.transferFrom(msg.sender, address(this), _tokenAmount), \\\"transfer failed!\\\");\\n\\n        (bool success, ) = payable(msg.sender).call{value: ethOut}(\\\"\\\");\\n        require(success, \\\"ETH transfer failed\\\");\\n\\n        liquidity[_tokenAddress] -= ethOut;\\n\\n    }\\n\\n    /** \\n     * @dev View function to estimate how many tokens will be received for a given ETH amount\\n     */\\n    function getEstimatedTokensForEth(address _tokenAddress, uint256 ethAmount) external view returns (uint256) {\\n        require(ethAmount > 0, \\\"Must provide ETH\\\");\\n\\n        Token token = Token(_tokenAddress);\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        uint256 ethReserve = liquidity[_tokenAddress];\\n\\n        if (ethReserve == 0 || tokenReserve == 0) return 0;\\n\\n        return (ethAmount * tokenReserve) / (ethReserve + ethAmount);\\n    }\\n\\n    /** \\n     * @dev View function to estimate how much ETH will be received for a given token amount\\n     */\\n    function getEstimatedEthForTokens(address _tokenAddress, uint256 tokenAmount) external view returns (uint256) {\\n        require(tokenAmount > 0, \\\"Must provide tokens\\\");\\n\\n        Token token = Token(_tokenAddress);\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        uint256 ethReserve = liquidity[_tokenAddress];\\n\\n        if (ethReserve == 0 || tokenReserve == 0) return 0;\\n\\n        return (tokenAmount * ethReserve) / (tokenReserve + tokenAmount);\\n    }\\n    \\n}\",\"keccak256\":\"0x801ff3ed36fdc1ad528d5a4e23da87cacb8fd63ec5355a256976f10e104e00e2\",\"license\":\"MIT\"},\"contracts/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { OFT } from \\\"@layerzerolabs/oft-evm/contracts/OFT.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Token is OFT {\\n    address public creator;\\n\\n    string public metadataURI; // Stores IPFS metadata JSON URI\\n\\n    // // Add mapping to track unique holders\\n    // mapping(address => bool) public isHolder;\\n    // uint256 public totalHolders;\\n\\n    constructor(\\n        address _creator,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _metadataURI,\\n        uint256 _totalSupply,\\n        address _lzEndpoint\\n    ) OFT(_name, _symbol, _lzEndpoint, _creator) Ownable(_creator) {\\n        creator = _creator;\\n        metadataURI = _metadataURI;\\n        _mint(msg.sender, _totalSupply);\\n    }\\n\\n    function mint(address receiver, uint256 mintQty) external onlyOwner {\\n        _mint(receiver, mintQty);\\n    }\\n\\n    // function burn(uint burnQty, address from) external {\\n    //     require(msg.sender == owner, \\\"Burn can only be called by the owner\\\");\\n    //     _burn(from, burnQty);\\n    // }\\n\\n    // function _update(address from, address to, uint256 amount) internal virtual override{\\n    //     super._update(from, to, amount);\\n\\n    //     if(from != address(0) && balanceOf(from) == 0){\\n    //         isHolder[from] = false;\\n    //         totalHolders--;\\n    //     }\\n        \\n    //     if(to != address(0) && !isHolder[to]){\\n    //         isHolder[to] = true;\\n    //         totalHolders++;\\n    //     }\\n    // }\\n\\n    // function getTotalHolders() external view returns (uint256){\\n    //     return totalHolders;\\n    // }\\n}\",\"keccak256\":\"0x348c0380f4609c21f673e0f6f49b0e98ce8d44f2474ed90f42edcb2ae456bdd5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0346200018c5762006115906001600160401b0390601f38849003908101601f1916820190838211838310176200019157808391604096879485528339810103126200018c578051602090910151916001600160a01b03908184168085036200018c573315620001745760008054336001600160a01b03198216811783559194167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08580a380608052803b15620001705790828092602488518096819363ca5eb5e160e01b83523360048401525af1801562000166576200013f575b50505060a05260c05251615f6d9081620001a88239608051818181610c050152818161106c01528181611141015281816119ed0152611e0a015260a0518181816103360152611399015260c051818181610cc3015281816114500152611f5e0152f35b82116200015257508352388080620000dc565b634e487b7160e01b81526041600452602490fd5b86513d84823e3d90fd5b8280fd5b8551631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060405260043610156200001357600080fd5b6000803560e01c8063018770201462002363578063031bd4c4146200233c578063036e8cab146200231157806313137d651462001d9457806317442b701462001d705780631fbc147b1462001bc95780632e1a7d4d1462001b2b5780633400288b1462001ab657806347fb20fd1462001a655780634f64b2be1462001a1c5780635e280f1114620019d5578063715018a61462001977578063764394a014620019265780637d25a05e14620018fc5780637e1c0c0914620018dc57806382413eac146200187b57806382cbdc0f14620013075780638da5cb5b14620012de578063980f258f1462000e135780639aaa546c1462000dbd5780639c0ad5ed1462000cf2578063b353aaa71462000cab578063bb0b6a531462000c72578063ca5eb5e11462000bd3578063cc1f2afa1462000bae578063cce7ec13146200059b578063d279c19114620003d9578063d7b7b1b414620003bb578063d8bc3c801462000359578063ddca3f43146200031c578063e11a0bd81462000278578063f2fde38b14620001e95763ff7bd03d14620001aa57600080fd5b34620001e6576060366003190112620001e657604060209163ffffffff620001d16200269a565b16815260018352205460405190602435148152f35b80fd5b5034620001e6576020366003190112620001e65762000207620023ae565b6200021162002837565b6001600160a01b039081169081156200025f576000548260018060a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b604051631e4fbdf760e01b815260048101849052602490fd5b5034620001e6576040366003190112620001e657620002ff60209160406200029f620023ae565b6001600160a01b0316825260058452902060243590670de0b6b3a764000090620002f690600490838510158062000307575b620002dc906200276f565b620002ee60ff60068301541662002735565b0154620028be565b910490620027a6565b604051908152f35b5069021e19e0c9bab2400000851115620002d1565b5034620001e65780600319360112620001e65760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b5034620001e6576040366003190112620001e65762000377620023ae565b6001600160a01b03908116825260096020526040822080546024359390841015620001e65750602092620003ab91620024b0565b9190546040519260031b1c168152f35b5034620001e65780600319360112620001e657602060405160038152f35b5034620001e65760209081600319360112620001e657620003f9620023ae565b6001600160a01b038116808352600584526040832060060154909190620004269060081c60ff16620027fd565b818352600884526040832033600052845260ff6040600020541662000563578183526006845260408320336000528452604060002054156200052e576200046f903390620028ec565b908115620004ff57829381845260088152604084209033600052526040600020600160ff19825416179055803b15620004fb576040516340c10f1960e01b81529183918391829084908290620004ca903360048401620027e2565b03925af18015620004f057620004dd5750f35b620004e8906200251e565b620001e65780f35b6040513d84823e3d90fd5b5050fd5b60405162461bcd60e51b8152600481018590526007602482015266085c995dd85c9960ca1b6044820152606490fd5b60405162461bcd60e51b815260048101859052600d60248201526c10b1b7b73a3934b13aba34b7b760991b6044820152606490fd5b60405162461bcd60e51b815260048101859052601060248201526f416c726561647920636c61696d65642160801b6044820152606490fd5b506040366003190112620001e657620005b3620023ae565b6001600160a01b0380821683526005602052604083208054909291602435911615158062000b9f575b620005e79062002735565b670de0b6b3a764000090818110158062000b8a575b62000607906200276f565b6200062660048501926200061c8454620028be565b90830490620027a6565b341062000b5c5760018060a01b0383168552600660205260408520336000526020526040600020541562000aef575b60018060a01b038316855260066020526040852033600052602052604060002062000682828254620027ba565b905560018060a01b0383168552600760205260408520336000526020526040600020620006b1348254620027ba565b905560405163a9059cbb60e01b81529060208280620006d5843360048401620027e2565b0381896001600160a01b0389165af191821562000ae457620007009262000ac0575b508254620027ba565b8091556969e10de76676d0800000600584019162000720348454620027ba565b809355109081159162000aac575b5062000738578280f35b60068201805460ff19811690915560081c60ff161562000756578280f35b6001600160a01b03811683526005602052604083206006810154909190620007859060081c60ff1615620027fd565b6040516370a0823160e01b8152306004820152906020826024816001600160a01b0385165afa91821562000aa157859262000a63575b5060018060a01b03811685526009602052604085209360405192838460208854928381520180988a5260208a20928a5b81811062000a40575050620008039250038562002532565b8351946200082e620008158762002a10565b9662000825604051988962002532565b80885262002a10565b6020870190601f1901368237885b86518110156200088e576001600160a01b038681168b52600760205260408b20600192916200086c838b62002a28565b511660005260205260406000205462000886828b62002a28565b52016200083c565b5060035460405163095ea7b360e01b81529498939792969591949060209082908190620008ca908c906001600160a01b031660048401620027e2565b03818d6001600160a01b0387165af1801562000a3557620009ff575b50600560018060a01b036003541696015494863b15620009fb576040516358c76a2360e11b81526001600160a01b03909216600483015260248201979097526080604482015295516084870181905288969594939260a487019291885b818110620009d8575050506020906003198784030160648801525191828152019190865b818110620009be575050509183809281879503925af18015620004f057620009a2575b5050600601805461ff00191661010017905538808280f35b620009ad906200251e565b620009ba5781386200098a565b5080fd5b825184528997506020938401939092019160010162000967565b82516001600160a01b031685528b99506020948501949092019160010162000943565b8980fd5b62000a259060203d60201162000a2d575b62000a1c818362002532565b810190620027c8565b5038620008e6565b503d62000a10565b6040513d8c823e3d90fd5b84546001600160a01b0316835260019485019489945060209093019201620007eb565b9091506020813d60201162000a98575b8162000a826020938362002532565b8101031262000a9457519038620007bb565b8480fd5b3d915062000a73565b6040513d87823e3d90fd5b6729a2241af62c000091501015386200072e565b62000adc9060203d60201162000a2d5762000a1c818362002532565b5038620006f7565b6040513d88823e3d90fd5b6001600160a01b03831685526009602052604085208054600160401b81101562000b465762000b2491600182018155620024b0565b81546001600160a01b0360039290921b91821b19163390911b17905562000655565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152600660248201526521707269636560d01b6044820152606490fd5b5069021e19e0c9bab2400000811115620005fc565b50600683015460ff16620005dc565b5034620001e65780600319360112620001e65760206040516729a2241af62c00008152f35b5034620001e6576020366003190112620001e65762000bf1620023ae565b62000bfb62002837565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691839190833b1562000c6e5760249083604051958694859363ca5eb5e160e01b85521660048401525af18015620004f05762000c60575080f35b62000c6b906200251e565b80f35b8280fd5b5034620001e6576020366003190112620001e657604060209163ffffffff62000c9a6200246a565b168152600183522054604051908152f35b5034620001e65780600319360112620001e6576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5034620001e6576020366003190112620001e6576001600160a01b03906040908262000d1d620023ae565b168152600560205220818154169060ff62000d3b60018301620025e9565b9362000d4a60028401620025e9565b9060038401541692600481015462000d94600660058401549301549362000d85604051998a99610100908b528060208c01528a019062002428565b9088820360408a015262002428565b946060870152608086015260a0850152818116151560c085015260081c16151560e08301520390f35b5034620001e6576040366003190112620001e65760ff604060209262000de2620023ae565b62000dec620023ca565b6001600160a01b039182168352600886528383209116825284522054604051911615158152f35b5060c0366003190112620001e65762000e2b6200246a565b906024356001600160401b038111620009ba5762000e4e903690600401620023f8565b926044356001600160401b038111620011115762000e71903690600401620023f8565b946064356001600160401b038111620012da5762000e94903690600401620023f8565b9062000e9f620023e1565b9160a4356001600160401b038111620012d65736602382011215620012d6579162000f289162000f1762000ee562000f4598979695369060248160040135910162002570565b9b62000f026040519b8c98608060208b015260a08a0191620026ae565b90601f1998898984030160408a0152620026ae565b9186868403016060870152620026ae565b6001600160a01b0390911660808301520390810184528362002532565b6040519062000f5482620024e6565b34825283602083015260405162000f6b8162002502565b848152846020820152604080519162000f8483620024e6565b8683528660208401520152815190813403620012be5760208301518062001131575b50602062000fb48262002864565b93015115156040519060a082018281106001600160401b038211176200111d576080969798620010599160405263ffffffff809516845260208401968752604084019889526060840190815287840192835262001045604051998a98899788976302637a4560e41b8952604060048a0152511660448801525160648701525160a0608487015260e486019062002428565b90518482036043190160a486015262002428565b9051151560c483015233602483015203917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af18015620004f057620010a6575080f35b8060803d60801162001115575b620010bf818362002532565b8101036080811262000c6e57602060405192620010dc8462002502565b8051845201516001600160401b0381168103620011115760206040930152603f190112620001e65762000c6b604051620024e6565b8380fd5b503d620010b3565b634e487b7160e01b88526041600452602488fd5b60405163393f876560e21b8152907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690602083600481855afa928315620012b357889362001264575b506001600160a01b038316156200125257604051916323b872dd60e01b602084015233602484015260448301526064820152606481528060a08101106001600160401b0360a0830111176200123e5760a0810160405280516020918891908301826001600160a01b0386165af11562000aa15785513d6200123457506001600160a01b0381163b155b1562000fa657604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b600114156200120c565b634e487b7160e01b87526041600452602487fd5b6040516329b99a9560e11b8152600490fd5b9092506020813d602011620012aa575b81620012836020938362002532565b81010312620012a657516001600160a01b0381168103620012a657913862001183565b8780fd5b3d915062001274565b6040513d8a823e3d90fd5b6040516304fb820960e51b8152346004820152602490fd5b8880fd5b8580fd5b5034620001e65780600319360112620001e657546040516001600160a01b039091168152602090f35b506080366003190112620001e6576004356001600160401b038111620009ba5762001337903690600401620023f8565b91906024356001600160401b03811162000c6e576200135b903690600401620023f8565b906044356001600160401b03811162000a94576200137e903690600401620023f8565b90916064356001600160a01b03811690818103620012a657907f0000000000000000000000000000000000000000000000000000000000000000341062001850571562001848575b604051916134fa91828401928484106001600160401b0385111762001834578493926200143e926200142e9262002a3e87396001600160a01b031680855260c0602086018190529099906200141f9086018e8d620026ae565b918583036040870152620026ae565b82810360608401528587620026ae565b69d3c21bcecceda100000060808301527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660a090920191909152039086f093841562000aa157620014ed929190620014e090620014ad6001600160a01b038816620026cf565b620014ba6002546200270f565b60025560405198620014cc8a620024c9565b6001600160a01b0388168a52369162002570565b6020880152369162002570565b604085015260608401528160808401528160a0840152600160c08401528160e084015260018060a01b031681526005602052604081209060018060a01b0383511660018060a01b031983541617825560208301519283516001600160401b0381116200182057620015626001850154620025ac565b601f8111620017d7575b50602094601f8211600114620017695794839495829394926200175d575b50508160011b916000199060031b1c19161760018401555b60408101519283516001600160401b0381116200174957620015c86002830154620025ac565b601f811162001700575b506020601f82116001146200168557918160069260e094879862000c6b989262001679575b50508160011b916000199060031b1c19161760028201555b6003810160018060a01b0360608601511660018060a01b03198254161790556080840151600482015560a0840151600582015501916200166160c08201511515849060ff801983541691151516179055565b0151815461ff00191690151560081b61ff0016179055565b015190503880620015f7565b6002830185526020852095855b601f1984168110620016e757508262000c6b969760e09593600193600696601f19811610620016cd575b505050811b0160028201556200160f565b015160001960f88460031b161c19169055388080620016bc565b8282015188556001909701966020928301920162001692565b60028301855260208520601f830160051c81016020841062001741575b601f830160051c8201811062001735575050620015d2565b8681556001016200171d565b50806200171d565b634e487b7160e01b84526041600452602484fd5b0151905038806200158a565b601f198216956001860185526020852091855b888110620017be57508360019596979810620017a4575b505050811b016001840155620015a2565b015160001960f88460031b161c1916905538808062001793565b919260206001819286850151815501940192016200177c565b60018501845260208420601f830160051c81016020841062001818575b601f830160051c820181106200180c5750506200156c565b858155600101620017f4565b5080620017f4565b634e487b7160e01b83526041600452602483fd5b634e487b7160e01b8a52604160045260248afd5b5033620013c6565b606460405162461bcd60e51b81526020600482015260046024820152632166656560e01b6044820152fd5b5034620001e657366003190160a08112620009ba57606013620001e6576064356001600160401b038111620009ba57620018ba903690600401620023f8565b50506020620018c8620023e1565b6040516001600160a01b0390911630148152f35b5034620001e65780600319360112620001e6576020600254604051908152f35b5034620001e6576040366003190112620001e6576020906200191d6200246a565b50604051908152f35b5034620001e6576040366003190112620001e657604060209162001949620023ae565b62001953620023ca565b6001600160a01b039182168352600785528383209116825283522054604051908152f35b5034620001e65780600319360112620001e6576200199462002837565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5034620001e65780600319360112620001e6576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5034620001e6576020366003190112620001e65760043590600454821015620001e657602062001a4c836200247e565b905460405160039290921b1c6001600160a01b03168152f35b5034620001e6576040366003190112620001e657604060209162001a88620023ae565b62001a92620023ca565b6001600160a01b039182168352600685528383209116825283522054604051908152f35b5034620001e6576040366003190112620001e6577f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b62001af56200246a565b6024359062001b0362002837565b63ffffffff16808452600160209081526040808620849055805192835290820192909252a180f35b5034620001e6576020366003190112620001e65762001b4962002837565b8080808060043560018060a01b038254165af13d1562001bc3573d62001b6f8162002554565b9062001b7f604051928362002532565b81528260203d92013e5b1562001b925780f35b60405162461bcd60e51b815260206004820152600960248201526810ba3930b739b332b960b91b6044820152606490fd5b62001b89565b5034620001e657602080600319360112620009ba576004358260e060405162001bf281620024c9565b828152606085820152606060408201528260608201528260808201528260a08201528260c0820152015260045481101562001d425762001c346040916200247e565b90546001600160a01b0360039290921b1c811684526005835292206040519162001c5e83620024c9565b83825416835262001c7260018301620025e9565b81840190815262001c8660028401620025e9565b91604085019283528560038501541693606086019485526004810154608087019081528762001d1b600660058501549460a08b0195865201549560c08a019560ff88161515875260ff60e08c019860081c16151588526040519b8c9b828d525116908b0152519662001d07610100988960408d01526101208c019062002428565b90518a8203601f190160608c015262002428565b96511660808801525160a08701525160c086015251151560e0850152511515908301520390f35b60405162461bcd60e51b8152600481018390526006602482015265042d2dcc8caf60d31b6044820152606490fd5b5034620001e65780600319360112620001e657604080516001815260026020820152f35b50366003190160e08112620009ba57606013620001e6576084356001600160401b038111620009ba5762001dcd903690600401620023f8565b90919060a4356001600160a01b03811603620009ba5760c4356001600160401b03811162000c6e5762001e05903690600401620023f8565b5050337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031603620022f95762001e4c62001e466200269a565b62002864565b602435809103620022c75750820191608081840312620009ba5780356001600160401b03811162000c6e578362001e859183016200289d565b9260208201356001600160401b03811162001111578162001ea89184016200289d565b9060408301356001600160401b03811162000a945760609162001ecd9185016200289d565b9201356001600160a01b03811691908290036200111157604051906134fa90818301918383106001600160401b038411176200123e5762001f3d84939262001f4c9262002a3e863986845260c0602085015262001f2e60c085018b62002428565b90848203604086015262002428565b82810360608401528662002428565b69d3c21bcecceda100000060808301527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660a090920191909152039084f0918215620022bc5762001faf6001600160a01b038416620026cf565b62001fbc6002546200270f565b6002556040519462001fce86620024c9565b60018060a01b03841686526020860152604085015260608401528160808401528160a0840152600160c08401528160e084015260018060a01b031681526005602052604081209060018060a01b0383511660018060a01b031983541617825560208301519283516001600160401b0381116200182057620020536001850154620025ac565b601f811162002273575b50602094601f821160011462002205579483949582939492620021f9575b50508160011b916000199060031b1c19161760018401555b60408101519283516001600160401b0381116200174957620020b96002830154620025ac565b601f8111620021b0575b506020601f82116001146200215057918160069260e094879862000c6b9892620016795750508160011b916000199060031b1c19161760028201556003810160018060a01b0360608601511660018060a01b03198254161790556080840151600482015560a0840151600582015501916200166160c08201511515849060ff801983541691151516179055565b6002830185526020852095855b601f19841681106200219757508262000c6b969760e09593600193600696601f19811610620016cd57505050811b0160028201556200160f565b828201518855600190970196602092830192016200215d565b60028301855260208520601f830160051c810160208410620021f1575b601f830160051c82018110620021e5575050620020c3565b868155600101620021cd565b5080620021cd565b0151905038806200207b565b601f198216956001860185526020852091855b8881106200225a5750836001959697981062002240575b505050811b01600184015562002093565b015160001960f88460031b161c191690553880806200222f565b9192602060018192868501518155019401920162002218565b60018501845260208420601f830160051c810160208410620022b4575b601f830160051c82018110620022a85750506200205d565b85815560010162002290565b508062002290565b6040513d85823e3d90fd5b620022d16200269a565b60405163309afaf360e21b815263ffffffff9190911660048201526024810191909152604490fd5b6040516391ac5e4f60e01b8152336004820152602490fd5b5034620001e65780600319360112620001e6576003546040516001600160a01b039091168152602090f35b5034620001e65780600319360112620001e65760206040516969e10de76676d08000008152f35b5034620001e6576020366003190112620001e65762002381620023ae565b6200238b62002837565b600380546001600160a01b0319166001600160a01b039290921691909117905580f35b600435906001600160a01b0382168203620023c557565b600080fd5b602435906001600160a01b0382168203620023c557565b608435906001600160a01b0382168203620023c557565b9181601f84011215620023c5578235916001600160401b038311620023c55760208381860195010111620023c557565b919082519283825260005b84811062002455575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520162002433565b6004359063ffffffff82168203620023c557565b6004548110156200249a57600460005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b80548210156200249a5760005260206000200190600090565b61010081019081106001600160401b0382111762000b4657604052565b604081019081106001600160401b0382111762000b4657604052565b606081019081106001600160401b0382111762000b4657604052565b6001600160401b03811162000b4657604052565b90601f801991011681019081106001600160401b0382111762000b4657604052565b6001600160401b03811162000b4657601f01601f191660200190565b9291926200257e8262002554565b916200258e604051938462002532565b829481845281830111620023c5578281602093846000960137010152565b90600182811c92168015620025de575b6020831014620025c857565b634e487b7160e01b600052602260045260246000fd5b91607f1691620025bc565b90604051918260008254620025fe81620025ac565b9081845260209460019160018116908160001462002676575060011462002633575b505050620026319250038362002532565b565b600090815285812095935091905b8183106200265d57505062002631935082010138808062002620565b8554888401850152948501948794509183019162002641565b925050506200263194925060ff191682840152151560051b82010138808062002620565b60043563ffffffff81168103620023c55790565b908060209392818452848401376000828201840152601f01601f1916010190565b600454600160401b81101562000b4657806001620026f192016004556200247e565b60018060a09493941b038084549260031b9316831b921b1916179055565b60001981146200271f5760010190565b634e487b7160e01b600052601160045260246000fd5b156200273d57565b60405162461bcd60e51b815260206004820152600a60248201526921617661696c61626c6560b01b6044820152606490fd5b156200277757565b60405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b6044820152606490fd5b818102929181159184041417156200271f57565b919082018092116200271f57565b90816020910312620023c557518015158103620023c55790565b6001600160a01b039091168152602081019190915260400190565b156200280557565b60405162461bcd60e51b815260206004820152600a602482015269216c697175696469747960b01b6044820152606490fd5b6000546001600160a01b031633036200284c57565b60405163118cdaa760e01b8152336004820152602490fd5b63ffffffff1680600052600160205260406000205490811562002885575090565b6024906040519063f6ff4fb760e01b82526004820152fd5b9080601f83011215620023c557816020620028bb9335910162002570565b90565b69021e19e0c9bab24000009004655af3107a400081810291818304036200271f5781018091116200271f5790565b9060018060a01b038092169060009282845260206005815260409260ff6006858820015460081c16158015620029f4575b8015620029d7575b620029cf576005928587526006835284872091168652815282852054938552528220906005820154600381029080820460031490151715620029bb576004916200296f91620027a6565b91015491606483029280840460641490151715620029a75782156200299357500490565b634e487b7160e01b81526012600452602490fd5b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b84526011600452602484fd5b505050505090565b508486526006825283862083821687528252838620541562002925565b50600882528386208382168752825260ff84872054166200291d565b6001600160401b03811162000b465760051b60200190565b80518210156200249a5760209160051b01019056fe60c06040818152346200075a57600091620034fa80380380916200002482856200075f565b833981019260c08285031262000757576200003f8262000799565b60208301516001600160401b03811162000753578562000061918501620007ae565b838501519095906001600160401b0381116200074f578162000085918601620007ae565b60608501519091906001600160401b0381116200074b5790620000aa918601620007ae565b91620000be60a06080870151960162000799565b6001600160a01b03929082841615620007335785548484166001600160a01b031982168117885585929183167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08980a3169788608052883b156200072f5787988680989951809263ca5eb5e160e01b825287871660048301528160249a8b925af180156200072557620006f6575b5064e8d4a5100060a0528051906001600160401b038211620006e357600854600181811c91168015620006d8575b6020821014620006c5579081601f84931162000663575b50602090601f8311600114620005ec578992620005e0575b50508160011b916000199060031b1c1916176008555b8051906001600160401b038211620005cd57600954600181811c91168015620005c2575b6020821014620005af579081601f8493116200054d575b50602090601f8311600114620004d6578892620004ca575b50508160011b916000199060031b1c1916176009555b600a8054919092166001600160a01b03199091161790558051906001600160401b038211620004b757600b54600181811c91168015620004ac575b602082101462000499579081601f84931162000426575b50602090601f83116001146200039e57859262000392575b50508160011b916000199060031b1c191617600b555b33156200037d57600754908382018092116200036b5750600755338152600560205282812082815401905582519182527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a351612c95908162000825823960805181818161096c01528181610e1a0152818161109d0152818161190201528181611a1001528181612a890152612b36015260a051818181610d6401528181611342015281816117b7015281816120300152818161224601526127e20152f35b634e487b7160e01b8352601160045282fd5b9083519063ec442f0560e01b82526004820152fd5b01519050388062000292565b600b86527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db99250601f198416865b8181106200040d5750908460019594939210620003f3575b505050811b01600b55620002a8565b015160001960f88460031b161c19169055388080620003e4565b92936020600181928786015181550195019301620003cc565b600b86529091507f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9601f840160051c810191602085106200048e575b90601f859493920160051c01905b8181106200047f57506200027a565b86815584935060010162000470565b909150819062000462565b634e487b7160e01b855260226004528385fd5b90607f169062000263565b634e487b7160e01b845260416004528284fd5b01519050388062000212565b60098952600080516020620034da8339815191529250601f198416895b8181106200053457509084600195949392106200051a575b505050811b0160095562000228565b015160001960f88460031b161c191690553880806200050b565b92936020600181928786015181550195019301620004f3565b60098952909150600080516020620034da833981519152601f840160051c81019160208510620005a4575b90601f859493920160051c01905b818110620005955750620001fa565b89815584935060010162000586565b909150819062000578565b634e487b7160e01b885260226004528688fd5b90607f1690620001e3565b634e487b7160e01b875260416004528587fd5b015190503880620001a9565b60088a52600080516020620034ba8339815191529250601f1984168a5b8181106200064a575090846001959493921062000630575b505050811b01600855620001bf565b015160001960f88460031b161c1916905538808062000621565b9293602060018192878601518155019501930162000609565b60088a52909150600080516020620034ba833981519152601f840160051c81019160208510620006ba575b90601f859493920160051c01905b818110620006ab575062000191565b8a81558493506001016200069c565b90915081906200068e565b634e487b7160e01b895260226004528789fd5b90607f16906200017a565b634e487b7160e01b885260416004528688fd5b9096906001600160401b0381116200071257895295386200014c565b634e487b7160e01b825260416004528682fd5b8a513d8a823e3d90fd5b8580fd5b8751631e4fbdf760e01b815260048101879052602490fd5b8480fd5b8380fd5b8280fd5b80fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200078357604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200075a57565b919080601f840112156200075a5782516001600160401b038111620007835760209060405192620007e983601f19601f85011601856200075f565b8184528282870101116200075a5760005b8181106200081057508260009394955001015290565b8581018301518482018401528201620007fa56fe6080604052600436101561001257600080fd5b60003560e01c806302d05d3f146102e257806303ee438c146102dd57806306fdde03146102d8578063095ea7b3146102d35780630d35b415146102ce578063111ecdad146102c957806313137d65146102c4578063134d4f25146102bf578063156a0d0f146102ba57806317442b70146102b557806318160ddd146102b05780631f5e1334146102ab57806323b872dd146102a6578063313ce567146102a15780633400288b1461029c5780633b6f743b1461029757806340c10f191461029257806352ae2879146102105780635535d4611461028d5780635a0dfe4d146102885780635e280f11146102835780636fc1b31e1461027e57806370a0823114610279578063715018a6146102745780637d25a05e1461026f57806382413eac1461026a578063857749b0146102655780638da5cb5b1461026057806395d89b411461025b578063963efcaa146102565780639f68b96414610251578063a9059cbb1461024c578063b731ea0a14610247578063b98bd07014610242578063bb0b6a531461023d578063bc70b35414610238578063bd815db014610233578063c7c7f5b31461022e578063ca5eb5e114610229578063d045a0dc14610224578063d42438851461021f578063dd62ed3e1461021a578063f2fde38b14610215578063fc0c546a146102105763ff7bd03d1461020b57600080fd5b611c06565b610ef3565b611b7a565b611b27565b611ab7565b61196a565b6118d1565b611739565b611595565b611541565b611506565b61142b565b6113b6565b611381565b611365565b61132a565b61129e565b611275565b611259565b6111fb565b6111d4565b611179565b61113c565b6110cc565b611087565b61103f565b610fd1565b610ec0565b610d07565b610c89565b610c5f565b610bb8565b610b9c565b610b7e565b610b5c565b610b35565b610b19565b610951565b610884565b61072d565b6105b5565b610518565b610456565b6102f7565b60009103126102f257565b600080fd5b346102f25760003660031901126102f257600a546040516001600160a01b039091168152602090f35b90600182811c92168015610350575b602083101461033a57565b634e487b7160e01b600052602260045260246000fd5b91607f169161032f565b634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b0382111761038b57604052565b61035a565b6001600160401b03811161038b57604052565b604081019081106001600160401b0382111761038b57604052565b60a081019081106001600160401b0382111761038b57604052565b90601f801991011681019081106001600160401b0382111761038b57604052565b60005b83811061040d5750506000910152565b81810151838201526020016103fd565b90602091610436815180928185528580860191016103fa565b601f01601f1916010190565b90602061045392818152019061041d565b90565b346102f2576000806003193601126105155760405181600b5461047881610320565b908184526020926001916001811690816000146104f357506001146104b8575b6104b4856104a8818903826103d9565b60405191829182610442565b0390f35b929450600b83528483205b8284106104e057505050816104b4936104a8928201019338610498565b80548585018701529285019281016104c3565b60ff191686860152505050151560051b82010191506104a8816104b438610498565b80fd5b346102f257600080600319360112610515576040518160085461053a81610320565b908184526020926001916001811690816000146104f35750600114610569576104b4856104a8818903826103d9565b929450600883528483205b82841061059157505050816104b4936104a8928201019338610498565b8054858501870152928501928101610574565b6001600160a01b038116036102f257565b346102f25760403660031901126102f2576004356105d2816105a4565b602435331561065c576001600160a01b03821691821561064357336000908152600660205260409020829161060b91611d25565b611d25565b556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b604051634a1406b160e11b815260006004820152602490fd5b60405163e602df0560e01b815260006004820152602490fd5b908160e09103126102f25790565b93929161069e8560a081019360208091805184520151910152565b60409160a06040870152815180915260c086019160c08260051b880101936020809201936000915b8483106106ee575050505050509060606106ec9294019060208091805184520151910152565b565b909192939495848061071d6001938d60bf1990820301875285838c51805184520151918185820152019061041d565b98019301930191949392906106c6565b346102f2576020806003193601126102f2576004356001600160401b0381116102f25761075e903690600401610675565b90610767611c66565b50610770611c66565b50604051637e062a3560e11b8152908082600481305afa918215610852576004928291600091610857575b506040516318160ddd60e01b815293849182906001600160a01b03165afa9182156108525760009261081f575b506104b4906107d5611c4c565b9260008452818401526108036107e9611cc6565b946107f381611ce9565b5060406060820135910135612027565b909161080d611c4c565b92835282015260405193849384610683565b819250610844906104b4923d851161084b575b61083c81836103d9565b810190611ca0565b91906107c8565b503d610832565b611c94565b6108779150823d841161087d575b61086f81836103d9565b810190611c7f565b3861079b565b503d610865565b346102f25760003660031901126102f2576004546040516001600160a01b039091168152602090f35b60609060031901126102f257600490565b9181601f840112156102f2578235916001600160401b0383116102f257602083818601950101116102f257565b600319810160e081126102f2576060136102f257600491606435916001600160401b03906084358281116102f25781610926916004016108be565b9390939260a435610936816105a4565b9260c4359182116102f25761094d916004016108be565b9091565b61095a366108eb565b50929492506001600160a01b039190507f00000000000000000000000000000000000000000000000000000000000000008216338103610b0157833561099f81610c7b565b6109a881612081565b906020860135809203610ad85750506109d06109c483886127b6565b6001600160a01b031690565b916109f66109e66109e1838a6127c2565b6127d4565b6109ef87611ce9565b5084612808565b809760288311610a34575b50505050610a2f610a20600080516020612c2083398151915294611ce9565b95604051938493169683611cf3565b0390a3005b90610a5f9291610a59610a4960408a016120b9565b93610a538a611ce9565b9261282c565b92612848565b90803b156102f257604051633e5ac80960e11b8152916000918391829084908290610a8f908c8a600485016120c3565b03925af1801561085257600080516020612c2083398151915294610a2f92610a2092610abf575b88919650610a01565b80610acc610ad292610390565b806102e7565b38610ab6565b610ae181610c7b565b610afd60405192839263309afaf360e21b845260048401611cf3565b0390fd5b6040516391ac5e4f60e01b8152336004820152602490fd5b346102f25760003660031901126102f257602060405160028152f35b346102f25760003660031901126102f2576040805162b9270b60e21b815260016020820152f35b346102f25760003660031901126102f257604080516001815260026020820152f35b346102f25760003660031901126102f2576020600754604051908152f35b346102f25760003660031901126102f257602060405160018152f35b346102f25760603660031901126102f257600435610bd5816105a4565b602435610be1816105a4565b6044359060018060a01b0383166000526006602052610c04336040600020611d25565b54926000198410610c26575b610c1a935061210c565b60405160018152602090f35b828410610c4257610c3d83610c1a95033383612733565b610c10565b604051637dc7a0d960e11b815280610afd858733600485016120ee565b346102f25760003660031901126102f257602060405160128152f35b63ffffffff8116036102f257565b346102f25760403660031901126102f2577f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b600435610cc781610c7b565b60243590610cd36121cf565b63ffffffff8116600052600160205281604060002055610cf860405192839283611cf3565b0390a1005b801515036102f257565b346102f2576040806003193601126102f2576004356001600160401b0381116102f257610d38903690600401610675565b90602435610d4581610cfd565b610d4d611c66565b506060830135833593610d5f85610c7b565b610d957f0000000000000000000000000000000000000000000000000000000000000000610d908187850135612783565b6127a3565b91808310610ea357508392610db1610e169693610dfb93612235565b90610dbb85610c7b565b610dc3611c66565b50610dcd85612081565b610de4610dd8611c59565b63ffffffff9097168752565b602086015285850152606084015215156080830152565b815180948192631bb8518b60e31b8352309060048401612380565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610852576104b492600092610e74575b505191829182815181526020918201519181019190915260400190565b81610e959293503d8411610e9c575b610e8d81836103d9565b81019061236c565b9038610e57565b503d610e83565b826044918651916371c4efed60e01b835260048301526024820152fd5b346102f25760403660031901126102f257610ef1600435610ee0816105a4565b610ee86121cf565b602435906123ee565b005b346102f25760003660031901126102f2576020604051308152f35b6024359061ffff821682036102f257565b359061ffff821682036102f257565b90604051918260008254610f4181610320565b90818452602094600191600181169081600014610faf5750600114610f70575b5050506106ec925003836103d9565b600090815285812095935091905b818310610f975750506106ec9350820101388080610f61565b85548884018501529485019487945091830191610f7e565b925050506106ec94925060ff191682840152151560051b820101388080610f61565b346102f25760403660031901126102f2576104b461102b611026600435610ff781610c7b565b63ffffffff611004610f0e565b9116600052600360205260406000209061ffff16600052602052604060002090565b610f2e565b60405191829160208352602083019061041d565b346102f25760403660031901126102f257602061107d60043561106181610c7b565b6024359063ffffffff1660005260016020526040600020541490565b6040519015158152f35b346102f25760003660031901126102f2576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346102f25760203660031901126102f2577ff0be4f1e87349231d80c36b33f9e8639658eeaf474014dee15a3e6a4d4414197602060043561110c816105a4565b6111146121cf565b600480546001600160a01b0319166001600160a01b03929092169182179055604051908152a1005b346102f25760203660031901126102f257600435611159816105a4565b60018060a01b031660005260056020526020604060002054604051908152f35b346102f257600080600319360112610515576111936121cf565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b346102f25760403660031901126102f2576111f0600435610c7b565b602060405160008152f35b346102f25760a03660031901126102f257611215366108ad565b506064356001600160401b0381116102f2576112359036906004016108be565b50506020608435611245816105a4565b6040516001600160a01b0390911630148152f35b346102f25760003660031901126102f257602060405160068152f35b346102f25760003660031901126102f2576000546040516001600160a01b039091168152602090f35b346102f25760008060031936011261051557604051816009546112c081610320565b908184526020926001916001811690816000146104f357506001146112ef576104b4856104a8818903826103d9565b929450600983528483205b82841061131757505050816104b4936104a8928201019338610498565b80548585018701529285019281016112fa565b346102f25760003660031901126102f25760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b346102f25760003660031901126102f257602060405160008152f35b346102f25760403660031901126102f2576113ab6004356113a1816105a4565b602435903361210c565b602060405160018152f35b346102f25760003660031901126102f2576002546040516001600160a01b039091168152602090f35b9060206003198301126102f2576004356001600160401b03928382116102f257806023830112156102f25781600401359384116102f25760248460051b830101116102f2576024019190565b346102f257611439366113df565b906114426121cf565b61144b82611caf565b90604061145b60405193846103d9565b8383526020938484019060051b8301923684116102f25780915b84831061148557610ef18661260d565b6001600160401b039083358281116102f2578301916060833603126102f2578551926114b084610370565b80356114bb81610c7b565b84526114c88a8201610f1f565b8a850152868101359182116102f257019036601f830112156102f25788926114f7849336908581359101611d57565b87820152815201920191611475565b346102f25760203660031901126102f25763ffffffff60043561152881610c7b565b1660005260016020526020604060002054604051908152f35b346102f25760603660031901126102f25760043561155e81610c7b565b611566610f0e565b604435906001600160401b0382116102f2576104b49261158d61102b9336906004016108be565b929091611dfc565b61159e366113df565b60005b81811061160d57604051638e9e709960e01b8152600081600481335afa801561085257610afd916000916115ea575b50604051638351eea760e01b815291829160048301610442565b61160791503d806000833e6115ff81836103d9565b810190611fa1565b826115d0565b611618818385611eb2565b9061164a61164661162884611ce9565b60208501359063ffffffff1660005260016020526040600020541490565b1590565b6116df5761165c610100830183611eda565b9261166960e08201611f0c565b90611678610120820182611eda565b959095303b156102f2576000946116ae60c092604051998a9788968795633411683760e21b875260a08a01358a60048901611f27565b03920135305af1918215610852576001926116cc575b505b016115a1565b80610acc6116d992610390565b386116c4565b600191506116c6565b9160806106ec929493611728604060c0830197805184526001600160401b0360208201511660208501520151604083019060208091805184520151910152565b019060208091805184520151910152565b60803660031901126102f2576004356001600160401b0381116102f257611764903690600401610675565b6040806023193601126102f2576064359061177e826105a4565b611786611fff565b5061178f611c66565b50611798611fff565b506117a1611c66565b506060830135916117b28435610c7b565b6117e37f0000000000000000000000000000000000000000000000000000000000000000610d908185880135612783565b928084106118b45750331561189c57906118276104b49261180485336128a2565b61180e8587612235565b61181788611ce9565b916118213661270b565b92612a0c565b92611830611c4c565b948186528160208701527f85496b760a4b7f8d66384b9df21b381f5d1b1e79f229a47aaf4c232edc2fe59a61188f611869875193611ce9565b9385519181839233978460409194939263ffffffff606083019616825260208201520152565b0390a351928392836116e8565b8151634b637e8f60e11b815260006004820152602490fd5b836044918451916371c4efed60e01b835260048301526024820152fd5b346102f25760006020366003190112610515576004356118f0816105a4565b6118f86121cf565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691839190833b156119665760249083604051958694859363ca5eb5e160e01b85521660048401525af180156108525761195a575080f35b61196390610390565b80f35b8280fd5b611973366108eb565b5050509290303303611aa55761198c6109c485836127b6565b936119ad61199d6109e183856127c2565b6119a685611ce9565b5086612808565b91602882116119ee575b50506119d1600080516020612c2083398151915292611ce9565b6040516001600160a01b0390951694918291610a2f919083611cf3565b9082611a0d92610a59611a03604088016120b9565b93610a5388611ce9565b917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b156102f257604051633e5ac80960e11b8152936000918591829084908290611a67908b8d600485016120c3565b03925af190811561085257600080516020612c20833981519152936119d192611a92575b50926119b7565b80610acc611a9f92610390565b38611a8b565b60405163029a949d60e31b8152600490fd5b346102f25760203660031901126102f2577fd48d879cef83a1c0bdda516f27b13ddb1b3f8bbac1c9e1511bb2a659c24277606020600435611af7816105a4565b611aff6121cf565b600280546001600160a01b0319166001600160a01b03929092169182179055604051908152a1005b346102f25760403660031901126102f2576020611b71600435611b49816105a4565b60243590611b56826105a4565b6001600160a01b031660009081526006845260409020611d25565b54604051908152f35b346102f25760203660031901126102f257600435611b97816105a4565b611b9f6121cf565b6001600160a01b039081168015611bed57600080546001600160a01b03198116831782559092167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b604051631e4fbdf760e01b815260006004820152602490fd5b346102f25760603660031901126102f2576020611c22366108ad565b63ffffffff8135611c3281610c7b565b166000526001825260406000205482604051920135148152f35b604051906106ec826103a3565b604051906106ec826103be565b60405190611c73826103a3565b60006020838281520152565b908160209103126102f25751610453816105a4565b6040513d6000823e3d90fd5b908160209103126102f2575190565b6001600160401b03811161038b5760051b60200190565b604051602081018181106001600160401b0382111761038b576040526000815290565b3561045381610c7b565b6020909392919363ffffffff60408201951681520152565b6001600160a01b0316600090815260056020526040902090565b9060018060a01b0316600052602052604060002090565b6001600160401b03811161038b57601f01601f191660200190565b929192611d6382611d3c565b91611d7160405193846103d9565b8294818452818301116102f2578281602093846000960137010152565b602090836106ec939594956040519683611db189955180928880890191016103fa565b84019185830137016000838201520380855201836103d9565b908060209392818452848401376000828201840152601f01601f1916010190565b916020610453938181520191611dca565b611e2a9163ffffffff6110269216600052600360205260406000209061ffff16600052602052604060002090565b805115611e90578215611e8a576002831015611e5d5750610afd604051928392639a6d49cd60e01b845260048401611deb565b611e70611e6b368585611d57565b6126d3565b826002116102f25761045392600119019160020190611d8e565b91505090565b50610453913691611d57565b634e487b7160e01b600052603260045260246000fd5b9190811015611ed55760051b8101359061013e19813603018212156102f2570190565b611e9c565b903590601e19813603018212156102f257018035906001600160401b0382116102f2576020019181360383136102f257565b35610453816105a4565b6001600160401b038116036102f257565b929093611f83926001600160401b0360406104539a98999763ffffffff8135611f4f81610c7b565b168852602081013560208901520135611f6781611f16565b166040860152606085015260e0608085015260e0840191611dca565b6001600160a01b0390941660a082015280840360c090910152611dca565b6020818303126102f2578051906001600160401b0382116102f2570181601f820112156102f2578051611fd381611d3c565b92611fe160405194856103d9565b818452602082840101116102f25761045391602080850191016103fa565b6040519061200c82610370565b8160008152600060208201526040612022611c66565b910152565b61205690610d907f00000000000000000000000000000000000000000000000000000000000000008092612783565b9182918084106120635750565b83604491604051916371c4efed60e01b835260048301526024820152fd5b63ffffffff168060005260016020526040600020549081156120a1575090565b6024906040519063f6ff4fb760e01b82526004820152fd5b3561045381611f16565b610453939260809260018060a01b03168252602082015260006040820152816060820152019061041d565b604091949392606082019560018060a01b0316825260208201520152565b916001600160a01b03808416929083156121b657811693841561219d5761213281611d0b565b5483811061217f5761217a92849261215e600080516020612c4083398151915296612164940391611d0b565b55611d0b565b8054820190556040519081529081906020820190565b0390a3565b90610afd8460405193849363391434e360e21b8552600485016120ee565b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fd5b6000546001600160a01b031633036121e357565b60405163118cdaa760e01b8152336004820152602490fd5b908160209103126102f2575161045381610cfd565b90916122276104539360408452604084019061041d565b91602081840391015261041d565b909161229961227761226b6122c0957f000000000000000000000000000000000000000000000000000000000000000090612783565b6001600160401b031690565b61228e61228760a0860186611eda565b3691611d57565b906020850135612945565b939092839460001461233c576002905b61158d6122b582611ce9565b916080810190611eda565b60045490926001600160a01b039091169083826122dc57505050565b60405163043a78eb60e01b8152926020928492839182916123009160048401612210565b03915afa8015610852576123115750565b6123329060203d602011612335575b61232a81836103d9565b8101906121fb565b50565b503d612320565b6001906122a9565b91908260409103126102f25760405161235c816103a3565b6020808294805184520151910152565b906040828203126102f25761045391612344565b906020909392936040835263ffffffff815116604084015281810151606084015260806123d46123be604084015160a08488015260e087019061041d565b6060840151868203603f190160a088015261041d565b910151151560c08401526001600160a01b03909416910152565b6001600160a01b0381169190821561219d576007549082820180921161243e5760009261242f602092600080516020612c4083398151915294600755611d0b565b818154019055604051908152a3565b61276d565b8051821015611ed55760209160051b010190565b90601f811161246557505050565b6000916000526020600020906020601f850160051c830194106124a3575b601f0160051c01915b82811061249857505050565b81815560010161248c565b9092508290612483565b91909182516001600160401b03811161038b576124d4816124ce8454610320565b84612457565b602080601f83116001146125175750819061250893949560009261250c575b50508160011b916000199060031b1c19161790565b9055565b0151905038806124f3565b90601f1983169561252d85600052602060002090565b926000905b88821061256a57505083600195969710612551575b505050811b019055565b015160001960f88460031b161c19169055388080612547565b80600185968294968601518155019501930190612532565b6020808201908083528351809252604092604081018260408560051b8401019601946000925b8584106125b9575050505050505090565b9091929394959685806125fc600193603f198682030188528b518760609163ffffffff815116845261ffff8682015116868501520151918189820152019061041d565b9901940194019295949391906125a8565b9060009160005b815181101561269957600190612693604061263b816126338588612443565b5101516126d3565b61268e816126498588612443565b5101519163ffffffff61265c8689612443565b515116895261ffff602091600383528a2091612678878a612443565b5101511661ffff16600052602052604060002090565b6124ad565b01612614565b507fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b6749192506126ce9060405191829182612582565b0390a1565b600361ffff600283015116036126e65750565b604051639a6d49cd60e01b815260206004820152908190610afd90602483019061041d565b60409060231901126102f25760405190612724826103a3565b60243582526044356020830152565b906001600160a01b038083161561065c578116156106435761060661276a9260018060a01b03166000526006602052604060002090565b55565b634e487b7160e01b600052601160045260246000fd5b811561278d570490565b634e487b7160e01b600052601260045260246000fd5b8181029291811591840414171561243e57565b906020116102f2573590565b906028116102f2576020013560c01c90565b610453906001600160401b037f000000000000000000000000000000000000000000000000000000000000000091166127a3565b816001600160a01b03821615612822575b610453916123ee565b61dead9150612819565b90806028116102f2576104539136916027190190602801611d57565b604c91936104539360405195869360018060c01b03199060c01b16602085015263ffffffff60e01b9060e01b166028840152602c83015261289281518092602086860191016103fa565b810103602c8101845201826103d9565b6001600160a01b03811690816128eb57506007549180830180931161243e576020600080516020612c40833981519152916000946007555b8060075403600755604051908152a3565b92916128f684611d0b565b54938185106129275781602091612921600080516020612c4083398151915294600097980391611d0b565b556128da565b610afd859260405193849363391434e360e21b8552600485016120ee565b825115801593906129a05761299d91606891604051948592602084015260018060c01b03199060c01b16604083015233604883015261298d81518092602086860191016103fa565b81010360488101845201826103d9565b91565b509060405191602083015260018060c01b03199060c01b1660408201526028815261299d81610370565b906080828203126102f257612a049060408051936129e785610370565b8051855260208101516129f981611f16565b602086015201612344565b604082015290565b612a6960809492612a859694612a20611fff565b506020612a2d8651612afd565b950191825180612aee575b50612a4285612081565b9251151592612a52610dd8611c59565b602086015260408501526060840152151585830152565b6040518095819482936302637a4560e41b845260048401612380565b03917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af190811561085257600091612ac5575090565b610453915060803d608011612ae7575b612adf81836103d9565b8101906129ca565b503d612ad5565b612af790612b1f565b38612a38565b803403612b075790565b6040516304fb820960e51b8152346004820152602490fd5b60405163393f876560e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691602081600481865afa90811561085257600091612c00575b5016918215612bee5760209160009160405190848201926323b872dd60e01b84523360248401526044830152606482015260648152612bae816103be565b519082855af115611c94576000513d612be55750803b155b612bcd5750565b60249060405190635274afe760e01b82526004820152fd5b60011415612bc6565b6040516329b99a9560e11b8152600490fd5b612c19915060203d60201161087d5761086f81836103d9565b38612b7056feefed6d3500546b29533b128a29e3a94d70788727f0507505ac12eaf2e578fd9cddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220c6accbc32c52bf7420cc738915797cbe3a91f59aabbe3b97f700093a752e482764736f6c63430008160033f3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee36e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7afa2646970667358221220ff66d9c56571566f665b9cac2b2e2369113aec64c8564c1c9a6a8d8fab6366d464736f6c63430008160033",
  "deployedBytecode": "0x608060405260043610156200001357600080fd5b6000803560e01c8063018770201462002363578063031bd4c4146200233c578063036e8cab146200231157806313137d651462001d9457806317442b701462001d705780631fbc147b1462001bc95780632e1a7d4d1462001b2b5780633400288b1462001ab657806347fb20fd1462001a655780634f64b2be1462001a1c5780635e280f1114620019d5578063715018a61462001977578063764394a014620019265780637d25a05e14620018fc5780637e1c0c0914620018dc57806382413eac146200187b57806382cbdc0f14620013075780638da5cb5b14620012de578063980f258f1462000e135780639aaa546c1462000dbd5780639c0ad5ed1462000cf2578063b353aaa71462000cab578063bb0b6a531462000c72578063ca5eb5e11462000bd3578063cc1f2afa1462000bae578063cce7ec13146200059b578063d279c19114620003d9578063d7b7b1b414620003bb578063d8bc3c801462000359578063ddca3f43146200031c578063e11a0bd81462000278578063f2fde38b14620001e95763ff7bd03d14620001aa57600080fd5b34620001e6576060366003190112620001e657604060209163ffffffff620001d16200269a565b16815260018352205460405190602435148152f35b80fd5b5034620001e6576020366003190112620001e65762000207620023ae565b6200021162002837565b6001600160a01b039081169081156200025f576000548260018060a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b604051631e4fbdf760e01b815260048101849052602490fd5b5034620001e6576040366003190112620001e657620002ff60209160406200029f620023ae565b6001600160a01b0316825260058452902060243590670de0b6b3a764000090620002f690600490838510158062000307575b620002dc906200276f565b620002ee60ff60068301541662002735565b0154620028be565b910490620027a6565b604051908152f35b5069021e19e0c9bab2400000851115620002d1565b5034620001e65780600319360112620001e65760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b5034620001e6576040366003190112620001e65762000377620023ae565b6001600160a01b03908116825260096020526040822080546024359390841015620001e65750602092620003ab91620024b0565b9190546040519260031b1c168152f35b5034620001e65780600319360112620001e657602060405160038152f35b5034620001e65760209081600319360112620001e657620003f9620023ae565b6001600160a01b038116808352600584526040832060060154909190620004269060081c60ff16620027fd565b818352600884526040832033600052845260ff6040600020541662000563578183526006845260408320336000528452604060002054156200052e576200046f903390620028ec565b908115620004ff57829381845260088152604084209033600052526040600020600160ff19825416179055803b15620004fb576040516340c10f1960e01b81529183918391829084908290620004ca903360048401620027e2565b03925af18015620004f057620004dd5750f35b620004e8906200251e565b620001e65780f35b6040513d84823e3d90fd5b5050fd5b60405162461bcd60e51b8152600481018590526007602482015266085c995dd85c9960ca1b6044820152606490fd5b60405162461bcd60e51b815260048101859052600d60248201526c10b1b7b73a3934b13aba34b7b760991b6044820152606490fd5b60405162461bcd60e51b815260048101859052601060248201526f416c726561647920636c61696d65642160801b6044820152606490fd5b506040366003190112620001e657620005b3620023ae565b6001600160a01b0380821683526005602052604083208054909291602435911615158062000b9f575b620005e79062002735565b670de0b6b3a764000090818110158062000b8a575b62000607906200276f565b6200062660048501926200061c8454620028be565b90830490620027a6565b341062000b5c5760018060a01b0383168552600660205260408520336000526020526040600020541562000aef575b60018060a01b038316855260066020526040852033600052602052604060002062000682828254620027ba565b905560018060a01b0383168552600760205260408520336000526020526040600020620006b1348254620027ba565b905560405163a9059cbb60e01b81529060208280620006d5843360048401620027e2565b0381896001600160a01b0389165af191821562000ae457620007009262000ac0575b508254620027ba565b8091556969e10de76676d0800000600584019162000720348454620027ba565b809355109081159162000aac575b5062000738578280f35b60068201805460ff19811690915560081c60ff161562000756578280f35b6001600160a01b03811683526005602052604083206006810154909190620007859060081c60ff1615620027fd565b6040516370a0823160e01b8152306004820152906020826024816001600160a01b0385165afa91821562000aa157859262000a63575b5060018060a01b03811685526009602052604085209360405192838460208854928381520180988a5260208a20928a5b81811062000a40575050620008039250038562002532565b8351946200082e620008158762002a10565b9662000825604051988962002532565b80885262002a10565b6020870190601f1901368237885b86518110156200088e576001600160a01b038681168b52600760205260408b20600192916200086c838b62002a28565b511660005260205260406000205462000886828b62002a28565b52016200083c565b5060035460405163095ea7b360e01b81529498939792969591949060209082908190620008ca908c906001600160a01b031660048401620027e2565b03818d6001600160a01b0387165af1801562000a3557620009ff575b50600560018060a01b036003541696015494863b15620009fb576040516358c76a2360e11b81526001600160a01b03909216600483015260248201979097526080604482015295516084870181905288969594939260a487019291885b818110620009d8575050506020906003198784030160648801525191828152019190865b818110620009be575050509183809281879503925af18015620004f057620009a2575b5050600601805461ff00191661010017905538808280f35b620009ad906200251e565b620009ba5781386200098a565b5080fd5b825184528997506020938401939092019160010162000967565b82516001600160a01b031685528b99506020948501949092019160010162000943565b8980fd5b62000a259060203d60201162000a2d575b62000a1c818362002532565b810190620027c8565b5038620008e6565b503d62000a10565b6040513d8c823e3d90fd5b84546001600160a01b0316835260019485019489945060209093019201620007eb565b9091506020813d60201162000a98575b8162000a826020938362002532565b8101031262000a9457519038620007bb565b8480fd5b3d915062000a73565b6040513d87823e3d90fd5b6729a2241af62c000091501015386200072e565b62000adc9060203d60201162000a2d5762000a1c818362002532565b5038620006f7565b6040513d88823e3d90fd5b6001600160a01b03831685526009602052604085208054600160401b81101562000b465762000b2491600182018155620024b0565b81546001600160a01b0360039290921b91821b19163390911b17905562000655565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152600660248201526521707269636560d01b6044820152606490fd5b5069021e19e0c9bab2400000811115620005fc565b50600683015460ff16620005dc565b5034620001e65780600319360112620001e65760206040516729a2241af62c00008152f35b5034620001e6576020366003190112620001e65762000bf1620023ae565b62000bfb62002837565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691839190833b1562000c6e5760249083604051958694859363ca5eb5e160e01b85521660048401525af18015620004f05762000c60575080f35b62000c6b906200251e565b80f35b8280fd5b5034620001e6576020366003190112620001e657604060209163ffffffff62000c9a6200246a565b168152600183522054604051908152f35b5034620001e65780600319360112620001e6576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5034620001e6576020366003190112620001e6576001600160a01b03906040908262000d1d620023ae565b168152600560205220818154169060ff62000d3b60018301620025e9565b9362000d4a60028401620025e9565b9060038401541692600481015462000d94600660058401549301549362000d85604051998a99610100908b528060208c01528a019062002428565b9088820360408a015262002428565b946060870152608086015260a0850152818116151560c085015260081c16151560e08301520390f35b5034620001e6576040366003190112620001e65760ff604060209262000de2620023ae565b62000dec620023ca565b6001600160a01b039182168352600886528383209116825284522054604051911615158152f35b5060c0366003190112620001e65762000e2b6200246a565b906024356001600160401b038111620009ba5762000e4e903690600401620023f8565b926044356001600160401b038111620011115762000e71903690600401620023f8565b946064356001600160401b038111620012da5762000e94903690600401620023f8565b9062000e9f620023e1565b9160a4356001600160401b038111620012d65736602382011215620012d6579162000f289162000f1762000ee562000f4598979695369060248160040135910162002570565b9b62000f026040519b8c98608060208b015260a08a0191620026ae565b90601f1998898984030160408a0152620026ae565b9186868403016060870152620026ae565b6001600160a01b0390911660808301520390810184528362002532565b6040519062000f5482620024e6565b34825283602083015260405162000f6b8162002502565b848152846020820152604080519162000f8483620024e6565b8683528660208401520152815190813403620012be5760208301518062001131575b50602062000fb48262002864565b93015115156040519060a082018281106001600160401b038211176200111d576080969798620010599160405263ffffffff809516845260208401968752604084019889526060840190815287840192835262001045604051998a98899788976302637a4560e41b8952604060048a0152511660448801525160648701525160a0608487015260e486019062002428565b90518482036043190160a486015262002428565b9051151560c483015233602483015203917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af18015620004f057620010a6575080f35b8060803d60801162001115575b620010bf818362002532565b8101036080811262000c6e57602060405192620010dc8462002502565b8051845201516001600160401b0381168103620011115760206040930152603f190112620001e65762000c6b604051620024e6565b8380fd5b503d620010b3565b634e487b7160e01b88526041600452602488fd5b60405163393f876560e21b8152907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690602083600481855afa928315620012b357889362001264575b506001600160a01b038316156200125257604051916323b872dd60e01b602084015233602484015260448301526064820152606481528060a08101106001600160401b0360a0830111176200123e5760a0810160405280516020918891908301826001600160a01b0386165af11562000aa15785513d6200123457506001600160a01b0381163b155b1562000fa657604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b600114156200120c565b634e487b7160e01b87526041600452602487fd5b6040516329b99a9560e11b8152600490fd5b9092506020813d602011620012aa575b81620012836020938362002532565b81010312620012a657516001600160a01b0381168103620012a657913862001183565b8780fd5b3d915062001274565b6040513d8a823e3d90fd5b6040516304fb820960e51b8152346004820152602490fd5b8880fd5b8580fd5b5034620001e65780600319360112620001e657546040516001600160a01b039091168152602090f35b506080366003190112620001e6576004356001600160401b038111620009ba5762001337903690600401620023f8565b91906024356001600160401b03811162000c6e576200135b903690600401620023f8565b906044356001600160401b03811162000a94576200137e903690600401620023f8565b90916064356001600160a01b03811690818103620012a657907f0000000000000000000000000000000000000000000000000000000000000000341062001850571562001848575b604051916134fa91828401928484106001600160401b0385111762001834578493926200143e926200142e9262002a3e87396001600160a01b031680855260c0602086018190529099906200141f9086018e8d620026ae565b918583036040870152620026ae565b82810360608401528587620026ae565b69d3c21bcecceda100000060808301527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660a090920191909152039086f093841562000aa157620014ed929190620014e090620014ad6001600160a01b038816620026cf565b620014ba6002546200270f565b60025560405198620014cc8a620024c9565b6001600160a01b0388168a52369162002570565b6020880152369162002570565b604085015260608401528160808401528160a0840152600160c08401528160e084015260018060a01b031681526005602052604081209060018060a01b0383511660018060a01b031983541617825560208301519283516001600160401b0381116200182057620015626001850154620025ac565b601f8111620017d7575b50602094601f8211600114620017695794839495829394926200175d575b50508160011b916000199060031b1c19161760018401555b60408101519283516001600160401b0381116200174957620015c86002830154620025ac565b601f811162001700575b506020601f82116001146200168557918160069260e094879862000c6b989262001679575b50508160011b916000199060031b1c19161760028201555b6003810160018060a01b0360608601511660018060a01b03198254161790556080840151600482015560a0840151600582015501916200166160c08201511515849060ff801983541691151516179055565b0151815461ff00191690151560081b61ff0016179055565b015190503880620015f7565b6002830185526020852095855b601f1984168110620016e757508262000c6b969760e09593600193600696601f19811610620016cd575b505050811b0160028201556200160f565b015160001960f88460031b161c19169055388080620016bc565b8282015188556001909701966020928301920162001692565b60028301855260208520601f830160051c81016020841062001741575b601f830160051c8201811062001735575050620015d2565b8681556001016200171d565b50806200171d565b634e487b7160e01b84526041600452602484fd5b0151905038806200158a565b601f198216956001860185526020852091855b888110620017be57508360019596979810620017a4575b505050811b016001840155620015a2565b015160001960f88460031b161c1916905538808062001793565b919260206001819286850151815501940192016200177c565b60018501845260208420601f830160051c81016020841062001818575b601f830160051c820181106200180c5750506200156c565b858155600101620017f4565b5080620017f4565b634e487b7160e01b83526041600452602483fd5b634e487b7160e01b8a52604160045260248afd5b5033620013c6565b606460405162461bcd60e51b81526020600482015260046024820152632166656560e01b6044820152fd5b5034620001e657366003190160a08112620009ba57606013620001e6576064356001600160401b038111620009ba57620018ba903690600401620023f8565b50506020620018c8620023e1565b6040516001600160a01b0390911630148152f35b5034620001e65780600319360112620001e6576020600254604051908152f35b5034620001e6576040366003190112620001e6576020906200191d6200246a565b50604051908152f35b5034620001e6576040366003190112620001e657604060209162001949620023ae565b62001953620023ca565b6001600160a01b039182168352600785528383209116825283522054604051908152f35b5034620001e65780600319360112620001e6576200199462002837565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5034620001e65780600319360112620001e6576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5034620001e6576020366003190112620001e65760043590600454821015620001e657602062001a4c836200247e565b905460405160039290921b1c6001600160a01b03168152f35b5034620001e6576040366003190112620001e657604060209162001a88620023ae565b62001a92620023ca565b6001600160a01b039182168352600685528383209116825283522054604051908152f35b5034620001e6576040366003190112620001e6577f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b62001af56200246a565b6024359062001b0362002837565b63ffffffff16808452600160209081526040808620849055805192835290820192909252a180f35b5034620001e6576020366003190112620001e65762001b4962002837565b8080808060043560018060a01b038254165af13d1562001bc3573d62001b6f8162002554565b9062001b7f604051928362002532565b81528260203d92013e5b1562001b925780f35b60405162461bcd60e51b815260206004820152600960248201526810ba3930b739b332b960b91b6044820152606490fd5b62001b89565b5034620001e657602080600319360112620009ba576004358260e060405162001bf281620024c9565b828152606085820152606060408201528260608201528260808201528260a08201528260c0820152015260045481101562001d425762001c346040916200247e565b90546001600160a01b0360039290921b1c811684526005835292206040519162001c5e83620024c9565b83825416835262001c7260018301620025e9565b81840190815262001c8660028401620025e9565b91604085019283528560038501541693606086019485526004810154608087019081528762001d1b600660058501549460a08b0195865201549560c08a019560ff88161515875260ff60e08c019860081c16151588526040519b8c9b828d525116908b0152519662001d07610100988960408d01526101208c019062002428565b90518a8203601f190160608c015262002428565b96511660808801525160a08701525160c086015251151560e0850152511515908301520390f35b60405162461bcd60e51b8152600481018390526006602482015265042d2dcc8caf60d31b6044820152606490fd5b5034620001e65780600319360112620001e657604080516001815260026020820152f35b50366003190160e08112620009ba57606013620001e6576084356001600160401b038111620009ba5762001dcd903690600401620023f8565b90919060a4356001600160a01b03811603620009ba5760c4356001600160401b03811162000c6e5762001e05903690600401620023f8565b5050337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031603620022f95762001e4c62001e466200269a565b62002864565b602435809103620022c75750820191608081840312620009ba5780356001600160401b03811162000c6e578362001e859183016200289d565b9260208201356001600160401b03811162001111578162001ea89184016200289d565b9060408301356001600160401b03811162000a945760609162001ecd9185016200289d565b9201356001600160a01b03811691908290036200111157604051906134fa90818301918383106001600160401b038411176200123e5762001f3d84939262001f4c9262002a3e863986845260c0602085015262001f2e60c085018b62002428565b90848203604086015262002428565b82810360608401528662002428565b69d3c21bcecceda100000060808301527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660a090920191909152039084f0918215620022bc5762001faf6001600160a01b038416620026cf565b62001fbc6002546200270f565b6002556040519462001fce86620024c9565b60018060a01b03841686526020860152604085015260608401528160808401528160a0840152600160c08401528160e084015260018060a01b031681526005602052604081209060018060a01b0383511660018060a01b031983541617825560208301519283516001600160401b0381116200182057620020536001850154620025ac565b601f811162002273575b50602094601f821160011462002205579483949582939492620021f9575b50508160011b916000199060031b1c19161760018401555b60408101519283516001600160401b0381116200174957620020b96002830154620025ac565b601f8111620021b0575b506020601f82116001146200215057918160069260e094879862000c6b9892620016795750508160011b916000199060031b1c19161760028201556003810160018060a01b0360608601511660018060a01b03198254161790556080840151600482015560a0840151600582015501916200166160c08201511515849060ff801983541691151516179055565b6002830185526020852095855b601f19841681106200219757508262000c6b969760e09593600193600696601f19811610620016cd57505050811b0160028201556200160f565b828201518855600190970196602092830192016200215d565b60028301855260208520601f830160051c810160208410620021f1575b601f830160051c82018110620021e5575050620020c3565b868155600101620021cd565b5080620021cd565b0151905038806200207b565b601f198216956001860185526020852091855b8881106200225a5750836001959697981062002240575b505050811b01600184015562002093565b015160001960f88460031b161c191690553880806200222f565b9192602060018192868501518155019401920162002218565b60018501845260208420601f830160051c810160208410620022b4575b601f830160051c82018110620022a85750506200205d565b85815560010162002290565b508062002290565b6040513d85823e3d90fd5b620022d16200269a565b60405163309afaf360e21b815263ffffffff9190911660048201526024810191909152604490fd5b6040516391ac5e4f60e01b8152336004820152602490fd5b5034620001e65780600319360112620001e6576003546040516001600160a01b039091168152602090f35b5034620001e65780600319360112620001e65760206040516969e10de76676d08000008152f35b5034620001e6576020366003190112620001e65762002381620023ae565b6200238b62002837565b600380546001600160a01b0319166001600160a01b039290921691909117905580f35b600435906001600160a01b0382168203620023c557565b600080fd5b602435906001600160a01b0382168203620023c557565b608435906001600160a01b0382168203620023c557565b9181601f84011215620023c5578235916001600160401b038311620023c55760208381860195010111620023c557565b919082519283825260005b84811062002455575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520162002433565b6004359063ffffffff82168203620023c557565b6004548110156200249a57600460005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b80548210156200249a5760005260206000200190600090565b61010081019081106001600160401b0382111762000b4657604052565b604081019081106001600160401b0382111762000b4657604052565b606081019081106001600160401b0382111762000b4657604052565b6001600160401b03811162000b4657604052565b90601f801991011681019081106001600160401b0382111762000b4657604052565b6001600160401b03811162000b4657601f01601f191660200190565b9291926200257e8262002554565b916200258e604051938462002532565b829481845281830111620023c5578281602093846000960137010152565b90600182811c92168015620025de575b6020831014620025c857565b634e487b7160e01b600052602260045260246000fd5b91607f1691620025bc565b90604051918260008254620025fe81620025ac565b9081845260209460019160018116908160001462002676575060011462002633575b505050620026319250038362002532565b565b600090815285812095935091905b8183106200265d57505062002631935082010138808062002620565b8554888401850152948501948794509183019162002641565b925050506200263194925060ff191682840152151560051b82010138808062002620565b60043563ffffffff81168103620023c55790565b908060209392818452848401376000828201840152601f01601f1916010190565b600454600160401b81101562000b4657806001620026f192016004556200247e565b60018060a09493941b038084549260031b9316831b921b1916179055565b60001981146200271f5760010190565b634e487b7160e01b600052601160045260246000fd5b156200273d57565b60405162461bcd60e51b815260206004820152600a60248201526921617661696c61626c6560b01b6044820152606490fd5b156200277757565b60405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b6044820152606490fd5b818102929181159184041417156200271f57565b919082018092116200271f57565b90816020910312620023c557518015158103620023c55790565b6001600160a01b039091168152602081019190915260400190565b156200280557565b60405162461bcd60e51b815260206004820152600a602482015269216c697175696469747960b01b6044820152606490fd5b6000546001600160a01b031633036200284c57565b60405163118cdaa760e01b8152336004820152602490fd5b63ffffffff1680600052600160205260406000205490811562002885575090565b6024906040519063f6ff4fb760e01b82526004820152fd5b9080601f83011215620023c557816020620028bb9335910162002570565b90565b69021e19e0c9bab24000009004655af3107a400081810291818304036200271f5781018091116200271f5790565b9060018060a01b038092169060009282845260206005815260409260ff6006858820015460081c16158015620029f4575b8015620029d7575b620029cf576005928587526006835284872091168652815282852054938552528220906005820154600381029080820460031490151715620029bb576004916200296f91620027a6565b91015491606483029280840460641490151715620029a75782156200299357500490565b634e487b7160e01b81526012600452602490fd5b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b84526011600452602484fd5b505050505090565b508486526006825283862083821687528252838620541562002925565b50600882528386208382168752825260ff84872054166200291d565b6001600160401b03811162000b465760051b60200190565b80518210156200249a5760209160051b01019056fe60c06040818152346200075a57600091620034fa80380380916200002482856200075f565b833981019260c08285031262000757576200003f8262000799565b60208301516001600160401b03811162000753578562000061918501620007ae565b838501519095906001600160401b0381116200074f578162000085918601620007ae565b60608501519091906001600160401b0381116200074b5790620000aa918601620007ae565b91620000be60a06080870151960162000799565b6001600160a01b03929082841615620007335785548484166001600160a01b031982168117885585929183167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08980a3169788608052883b156200072f5787988680989951809263ca5eb5e160e01b825287871660048301528160249a8b925af180156200072557620006f6575b5064e8d4a5100060a0528051906001600160401b038211620006e357600854600181811c91168015620006d8575b6020821014620006c5579081601f84931162000663575b50602090601f8311600114620005ec578992620005e0575b50508160011b916000199060031b1c1916176008555b8051906001600160401b038211620005cd57600954600181811c91168015620005c2575b6020821014620005af579081601f8493116200054d575b50602090601f8311600114620004d6578892620004ca575b50508160011b916000199060031b1c1916176009555b600a8054919092166001600160a01b03199091161790558051906001600160401b038211620004b757600b54600181811c91168015620004ac575b602082101462000499579081601f84931162000426575b50602090601f83116001146200039e57859262000392575b50508160011b916000199060031b1c191617600b555b33156200037d57600754908382018092116200036b5750600755338152600560205282812082815401905582519182527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a351612c95908162000825823960805181818161096c01528181610e1a0152818161109d0152818161190201528181611a1001528181612a890152612b36015260a051818181610d6401528181611342015281816117b7015281816120300152818161224601526127e20152f35b634e487b7160e01b8352601160045282fd5b9083519063ec442f0560e01b82526004820152fd5b01519050388062000292565b600b86527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db99250601f198416865b8181106200040d5750908460019594939210620003f3575b505050811b01600b55620002a8565b015160001960f88460031b161c19169055388080620003e4565b92936020600181928786015181550195019301620003cc565b600b86529091507f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9601f840160051c810191602085106200048e575b90601f859493920160051c01905b8181106200047f57506200027a565b86815584935060010162000470565b909150819062000462565b634e487b7160e01b855260226004528385fd5b90607f169062000263565b634e487b7160e01b845260416004528284fd5b01519050388062000212565b60098952600080516020620034da8339815191529250601f198416895b8181106200053457509084600195949392106200051a575b505050811b0160095562000228565b015160001960f88460031b161c191690553880806200050b565b92936020600181928786015181550195019301620004f3565b60098952909150600080516020620034da833981519152601f840160051c81019160208510620005a4575b90601f859493920160051c01905b818110620005955750620001fa565b89815584935060010162000586565b909150819062000578565b634e487b7160e01b885260226004528688fd5b90607f1690620001e3565b634e487b7160e01b875260416004528587fd5b015190503880620001a9565b60088a52600080516020620034ba8339815191529250601f1984168a5b8181106200064a575090846001959493921062000630575b505050811b01600855620001bf565b015160001960f88460031b161c1916905538808062000621565b9293602060018192878601518155019501930162000609565b60088a52909150600080516020620034ba833981519152601f840160051c81019160208510620006ba575b90601f859493920160051c01905b818110620006ab575062000191565b8a81558493506001016200069c565b90915081906200068e565b634e487b7160e01b895260226004528789fd5b90607f16906200017a565b634e487b7160e01b885260416004528688fd5b9096906001600160401b0381116200071257895295386200014c565b634e487b7160e01b825260416004528682fd5b8a513d8a823e3d90fd5b8580fd5b8751631e4fbdf760e01b815260048101879052602490fd5b8480fd5b8380fd5b8280fd5b80fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200078357604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200075a57565b919080601f840112156200075a5782516001600160401b038111620007835760209060405192620007e983601f19601f85011601856200075f565b8184528282870101116200075a5760005b8181106200081057508260009394955001015290565b8581018301518482018401528201620007fa56fe6080604052600436101561001257600080fd5b60003560e01c806302d05d3f146102e257806303ee438c146102dd57806306fdde03146102d8578063095ea7b3146102d35780630d35b415146102ce578063111ecdad146102c957806313137d65146102c4578063134d4f25146102bf578063156a0d0f146102ba57806317442b70146102b557806318160ddd146102b05780631f5e1334146102ab57806323b872dd146102a6578063313ce567146102a15780633400288b1461029c5780633b6f743b1461029757806340c10f191461029257806352ae2879146102105780635535d4611461028d5780635a0dfe4d146102885780635e280f11146102835780636fc1b31e1461027e57806370a0823114610279578063715018a6146102745780637d25a05e1461026f57806382413eac1461026a578063857749b0146102655780638da5cb5b1461026057806395d89b411461025b578063963efcaa146102565780639f68b96414610251578063a9059cbb1461024c578063b731ea0a14610247578063b98bd07014610242578063bb0b6a531461023d578063bc70b35414610238578063bd815db014610233578063c7c7f5b31461022e578063ca5eb5e114610229578063d045a0dc14610224578063d42438851461021f578063dd62ed3e1461021a578063f2fde38b14610215578063fc0c546a146102105763ff7bd03d1461020b57600080fd5b611c06565b610ef3565b611b7a565b611b27565b611ab7565b61196a565b6118d1565b611739565b611595565b611541565b611506565b61142b565b6113b6565b611381565b611365565b61132a565b61129e565b611275565b611259565b6111fb565b6111d4565b611179565b61113c565b6110cc565b611087565b61103f565b610fd1565b610ec0565b610d07565b610c89565b610c5f565b610bb8565b610b9c565b610b7e565b610b5c565b610b35565b610b19565b610951565b610884565b61072d565b6105b5565b610518565b610456565b6102f7565b60009103126102f257565b600080fd5b346102f25760003660031901126102f257600a546040516001600160a01b039091168152602090f35b90600182811c92168015610350575b602083101461033a57565b634e487b7160e01b600052602260045260246000fd5b91607f169161032f565b634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b0382111761038b57604052565b61035a565b6001600160401b03811161038b57604052565b604081019081106001600160401b0382111761038b57604052565b60a081019081106001600160401b0382111761038b57604052565b90601f801991011681019081106001600160401b0382111761038b57604052565b60005b83811061040d5750506000910152565b81810151838201526020016103fd565b90602091610436815180928185528580860191016103fa565b601f01601f1916010190565b90602061045392818152019061041d565b90565b346102f2576000806003193601126105155760405181600b5461047881610320565b908184526020926001916001811690816000146104f357506001146104b8575b6104b4856104a8818903826103d9565b60405191829182610442565b0390f35b929450600b83528483205b8284106104e057505050816104b4936104a8928201019338610498565b80548585018701529285019281016104c3565b60ff191686860152505050151560051b82010191506104a8816104b438610498565b80fd5b346102f257600080600319360112610515576040518160085461053a81610320565b908184526020926001916001811690816000146104f35750600114610569576104b4856104a8818903826103d9565b929450600883528483205b82841061059157505050816104b4936104a8928201019338610498565b8054858501870152928501928101610574565b6001600160a01b038116036102f257565b346102f25760403660031901126102f2576004356105d2816105a4565b602435331561065c576001600160a01b03821691821561064357336000908152600660205260409020829161060b91611d25565b611d25565b556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b604051634a1406b160e11b815260006004820152602490fd5b60405163e602df0560e01b815260006004820152602490fd5b908160e09103126102f25790565b93929161069e8560a081019360208091805184520151910152565b60409160a06040870152815180915260c086019160c08260051b880101936020809201936000915b8483106106ee575050505050509060606106ec9294019060208091805184520151910152565b565b909192939495848061071d6001938d60bf1990820301875285838c51805184520151918185820152019061041d565b98019301930191949392906106c6565b346102f2576020806003193601126102f2576004356001600160401b0381116102f25761075e903690600401610675565b90610767611c66565b50610770611c66565b50604051637e062a3560e11b8152908082600481305afa918215610852576004928291600091610857575b506040516318160ddd60e01b815293849182906001600160a01b03165afa9182156108525760009261081f575b506104b4906107d5611c4c565b9260008452818401526108036107e9611cc6565b946107f381611ce9565b5060406060820135910135612027565b909161080d611c4c565b92835282015260405193849384610683565b819250610844906104b4923d851161084b575b61083c81836103d9565b810190611ca0565b91906107c8565b503d610832565b611c94565b6108779150823d841161087d575b61086f81836103d9565b810190611c7f565b3861079b565b503d610865565b346102f25760003660031901126102f2576004546040516001600160a01b039091168152602090f35b60609060031901126102f257600490565b9181601f840112156102f2578235916001600160401b0383116102f257602083818601950101116102f257565b600319810160e081126102f2576060136102f257600491606435916001600160401b03906084358281116102f25781610926916004016108be565b9390939260a435610936816105a4565b9260c4359182116102f25761094d916004016108be565b9091565b61095a366108eb565b50929492506001600160a01b039190507f00000000000000000000000000000000000000000000000000000000000000008216338103610b0157833561099f81610c7b565b6109a881612081565b906020860135809203610ad85750506109d06109c483886127b6565b6001600160a01b031690565b916109f66109e66109e1838a6127c2565b6127d4565b6109ef87611ce9565b5084612808565b809760288311610a34575b50505050610a2f610a20600080516020612c2083398151915294611ce9565b95604051938493169683611cf3565b0390a3005b90610a5f9291610a59610a4960408a016120b9565b93610a538a611ce9565b9261282c565b92612848565b90803b156102f257604051633e5ac80960e11b8152916000918391829084908290610a8f908c8a600485016120c3565b03925af1801561085257600080516020612c2083398151915294610a2f92610a2092610abf575b88919650610a01565b80610acc610ad292610390565b806102e7565b38610ab6565b610ae181610c7b565b610afd60405192839263309afaf360e21b845260048401611cf3565b0390fd5b6040516391ac5e4f60e01b8152336004820152602490fd5b346102f25760003660031901126102f257602060405160028152f35b346102f25760003660031901126102f2576040805162b9270b60e21b815260016020820152f35b346102f25760003660031901126102f257604080516001815260026020820152f35b346102f25760003660031901126102f2576020600754604051908152f35b346102f25760003660031901126102f257602060405160018152f35b346102f25760603660031901126102f257600435610bd5816105a4565b602435610be1816105a4565b6044359060018060a01b0383166000526006602052610c04336040600020611d25565b54926000198410610c26575b610c1a935061210c565b60405160018152602090f35b828410610c4257610c3d83610c1a95033383612733565b610c10565b604051637dc7a0d960e11b815280610afd858733600485016120ee565b346102f25760003660031901126102f257602060405160128152f35b63ffffffff8116036102f257565b346102f25760403660031901126102f2577f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b600435610cc781610c7b565b60243590610cd36121cf565b63ffffffff8116600052600160205281604060002055610cf860405192839283611cf3565b0390a1005b801515036102f257565b346102f2576040806003193601126102f2576004356001600160401b0381116102f257610d38903690600401610675565b90602435610d4581610cfd565b610d4d611c66565b506060830135833593610d5f85610c7b565b610d957f0000000000000000000000000000000000000000000000000000000000000000610d908187850135612783565b6127a3565b91808310610ea357508392610db1610e169693610dfb93612235565b90610dbb85610c7b565b610dc3611c66565b50610dcd85612081565b610de4610dd8611c59565b63ffffffff9097168752565b602086015285850152606084015215156080830152565b815180948192631bb8518b60e31b8352309060048401612380565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610852576104b492600092610e74575b505191829182815181526020918201519181019190915260400190565b81610e959293503d8411610e9c575b610e8d81836103d9565b81019061236c565b9038610e57565b503d610e83565b826044918651916371c4efed60e01b835260048301526024820152fd5b346102f25760403660031901126102f257610ef1600435610ee0816105a4565b610ee86121cf565b602435906123ee565b005b346102f25760003660031901126102f2576020604051308152f35b6024359061ffff821682036102f257565b359061ffff821682036102f257565b90604051918260008254610f4181610320565b90818452602094600191600181169081600014610faf5750600114610f70575b5050506106ec925003836103d9565b600090815285812095935091905b818310610f975750506106ec9350820101388080610f61565b85548884018501529485019487945091830191610f7e565b925050506106ec94925060ff191682840152151560051b820101388080610f61565b346102f25760403660031901126102f2576104b461102b611026600435610ff781610c7b565b63ffffffff611004610f0e565b9116600052600360205260406000209061ffff16600052602052604060002090565b610f2e565b60405191829160208352602083019061041d565b346102f25760403660031901126102f257602061107d60043561106181610c7b565b6024359063ffffffff1660005260016020526040600020541490565b6040519015158152f35b346102f25760003660031901126102f2576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346102f25760203660031901126102f2577ff0be4f1e87349231d80c36b33f9e8639658eeaf474014dee15a3e6a4d4414197602060043561110c816105a4565b6111146121cf565b600480546001600160a01b0319166001600160a01b03929092169182179055604051908152a1005b346102f25760203660031901126102f257600435611159816105a4565b60018060a01b031660005260056020526020604060002054604051908152f35b346102f257600080600319360112610515576111936121cf565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b346102f25760403660031901126102f2576111f0600435610c7b565b602060405160008152f35b346102f25760a03660031901126102f257611215366108ad565b506064356001600160401b0381116102f2576112359036906004016108be565b50506020608435611245816105a4565b6040516001600160a01b0390911630148152f35b346102f25760003660031901126102f257602060405160068152f35b346102f25760003660031901126102f2576000546040516001600160a01b039091168152602090f35b346102f25760008060031936011261051557604051816009546112c081610320565b908184526020926001916001811690816000146104f357506001146112ef576104b4856104a8818903826103d9565b929450600983528483205b82841061131757505050816104b4936104a8928201019338610498565b80548585018701529285019281016112fa565b346102f25760003660031901126102f25760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b346102f25760003660031901126102f257602060405160008152f35b346102f25760403660031901126102f2576113ab6004356113a1816105a4565b602435903361210c565b602060405160018152f35b346102f25760003660031901126102f2576002546040516001600160a01b039091168152602090f35b9060206003198301126102f2576004356001600160401b03928382116102f257806023830112156102f25781600401359384116102f25760248460051b830101116102f2576024019190565b346102f257611439366113df565b906114426121cf565b61144b82611caf565b90604061145b60405193846103d9565b8383526020938484019060051b8301923684116102f25780915b84831061148557610ef18661260d565b6001600160401b039083358281116102f2578301916060833603126102f2578551926114b084610370565b80356114bb81610c7b565b84526114c88a8201610f1f565b8a850152868101359182116102f257019036601f830112156102f25788926114f7849336908581359101611d57565b87820152815201920191611475565b346102f25760203660031901126102f25763ffffffff60043561152881610c7b565b1660005260016020526020604060002054604051908152f35b346102f25760603660031901126102f25760043561155e81610c7b565b611566610f0e565b604435906001600160401b0382116102f2576104b49261158d61102b9336906004016108be565b929091611dfc565b61159e366113df565b60005b81811061160d57604051638e9e709960e01b8152600081600481335afa801561085257610afd916000916115ea575b50604051638351eea760e01b815291829160048301610442565b61160791503d806000833e6115ff81836103d9565b810190611fa1565b826115d0565b611618818385611eb2565b9061164a61164661162884611ce9565b60208501359063ffffffff1660005260016020526040600020541490565b1590565b6116df5761165c610100830183611eda565b9261166960e08201611f0c565b90611678610120820182611eda565b959095303b156102f2576000946116ae60c092604051998a9788968795633411683760e21b875260a08a01358a60048901611f27565b03920135305af1918215610852576001926116cc575b505b016115a1565b80610acc6116d992610390565b386116c4565b600191506116c6565b9160806106ec929493611728604060c0830197805184526001600160401b0360208201511660208501520151604083019060208091805184520151910152565b019060208091805184520151910152565b60803660031901126102f2576004356001600160401b0381116102f257611764903690600401610675565b6040806023193601126102f2576064359061177e826105a4565b611786611fff565b5061178f611c66565b50611798611fff565b506117a1611c66565b506060830135916117b28435610c7b565b6117e37f0000000000000000000000000000000000000000000000000000000000000000610d908185880135612783565b928084106118b45750331561189c57906118276104b49261180485336128a2565b61180e8587612235565b61181788611ce9565b916118213661270b565b92612a0c565b92611830611c4c565b948186528160208701527f85496b760a4b7f8d66384b9df21b381f5d1b1e79f229a47aaf4c232edc2fe59a61188f611869875193611ce9565b9385519181839233978460409194939263ffffffff606083019616825260208201520152565b0390a351928392836116e8565b8151634b637e8f60e11b815260006004820152602490fd5b836044918451916371c4efed60e01b835260048301526024820152fd5b346102f25760006020366003190112610515576004356118f0816105a4565b6118f86121cf565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691839190833b156119665760249083604051958694859363ca5eb5e160e01b85521660048401525af180156108525761195a575080f35b61196390610390565b80f35b8280fd5b611973366108eb565b5050509290303303611aa55761198c6109c485836127b6565b936119ad61199d6109e183856127c2565b6119a685611ce9565b5086612808565b91602882116119ee575b50506119d1600080516020612c2083398151915292611ce9565b6040516001600160a01b0390951694918291610a2f919083611cf3565b9082611a0d92610a59611a03604088016120b9565b93610a5388611ce9565b917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b156102f257604051633e5ac80960e11b8152936000918591829084908290611a67908b8d600485016120c3565b03925af190811561085257600080516020612c20833981519152936119d192611a92575b50926119b7565b80610acc611a9f92610390565b38611a8b565b60405163029a949d60e31b8152600490fd5b346102f25760203660031901126102f2577fd48d879cef83a1c0bdda516f27b13ddb1b3f8bbac1c9e1511bb2a659c24277606020600435611af7816105a4565b611aff6121cf565b600280546001600160a01b0319166001600160a01b03929092169182179055604051908152a1005b346102f25760403660031901126102f2576020611b71600435611b49816105a4565b60243590611b56826105a4565b6001600160a01b031660009081526006845260409020611d25565b54604051908152f35b346102f25760203660031901126102f257600435611b97816105a4565b611b9f6121cf565b6001600160a01b039081168015611bed57600080546001600160a01b03198116831782559092167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b604051631e4fbdf760e01b815260006004820152602490fd5b346102f25760603660031901126102f2576020611c22366108ad565b63ffffffff8135611c3281610c7b565b166000526001825260406000205482604051920135148152f35b604051906106ec826103a3565b604051906106ec826103be565b60405190611c73826103a3565b60006020838281520152565b908160209103126102f25751610453816105a4565b6040513d6000823e3d90fd5b908160209103126102f2575190565b6001600160401b03811161038b5760051b60200190565b604051602081018181106001600160401b0382111761038b576040526000815290565b3561045381610c7b565b6020909392919363ffffffff60408201951681520152565b6001600160a01b0316600090815260056020526040902090565b9060018060a01b0316600052602052604060002090565b6001600160401b03811161038b57601f01601f191660200190565b929192611d6382611d3c565b91611d7160405193846103d9565b8294818452818301116102f2578281602093846000960137010152565b602090836106ec939594956040519683611db189955180928880890191016103fa565b84019185830137016000838201520380855201836103d9565b908060209392818452848401376000828201840152601f01601f1916010190565b916020610453938181520191611dca565b611e2a9163ffffffff6110269216600052600360205260406000209061ffff16600052602052604060002090565b805115611e90578215611e8a576002831015611e5d5750610afd604051928392639a6d49cd60e01b845260048401611deb565b611e70611e6b368585611d57565b6126d3565b826002116102f25761045392600119019160020190611d8e565b91505090565b50610453913691611d57565b634e487b7160e01b600052603260045260246000fd5b9190811015611ed55760051b8101359061013e19813603018212156102f2570190565b611e9c565b903590601e19813603018212156102f257018035906001600160401b0382116102f2576020019181360383136102f257565b35610453816105a4565b6001600160401b038116036102f257565b929093611f83926001600160401b0360406104539a98999763ffffffff8135611f4f81610c7b565b168852602081013560208901520135611f6781611f16565b166040860152606085015260e0608085015260e0840191611dca565b6001600160a01b0390941660a082015280840360c090910152611dca565b6020818303126102f2578051906001600160401b0382116102f2570181601f820112156102f2578051611fd381611d3c565b92611fe160405194856103d9565b818452602082840101116102f25761045391602080850191016103fa565b6040519061200c82610370565b8160008152600060208201526040612022611c66565b910152565b61205690610d907f00000000000000000000000000000000000000000000000000000000000000008092612783565b9182918084106120635750565b83604491604051916371c4efed60e01b835260048301526024820152fd5b63ffffffff168060005260016020526040600020549081156120a1575090565b6024906040519063f6ff4fb760e01b82526004820152fd5b3561045381611f16565b610453939260809260018060a01b03168252602082015260006040820152816060820152019061041d565b604091949392606082019560018060a01b0316825260208201520152565b916001600160a01b03808416929083156121b657811693841561219d5761213281611d0b565b5483811061217f5761217a92849261215e600080516020612c4083398151915296612164940391611d0b565b55611d0b565b8054820190556040519081529081906020820190565b0390a3565b90610afd8460405193849363391434e360e21b8552600485016120ee565b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fd5b6000546001600160a01b031633036121e357565b60405163118cdaa760e01b8152336004820152602490fd5b908160209103126102f2575161045381610cfd565b90916122276104539360408452604084019061041d565b91602081840391015261041d565b909161229961227761226b6122c0957f000000000000000000000000000000000000000000000000000000000000000090612783565b6001600160401b031690565b61228e61228760a0860186611eda565b3691611d57565b906020850135612945565b939092839460001461233c576002905b61158d6122b582611ce9565b916080810190611eda565b60045490926001600160a01b039091169083826122dc57505050565b60405163043a78eb60e01b8152926020928492839182916123009160048401612210565b03915afa8015610852576123115750565b6123329060203d602011612335575b61232a81836103d9565b8101906121fb565b50565b503d612320565b6001906122a9565b91908260409103126102f25760405161235c816103a3565b6020808294805184520151910152565b906040828203126102f25761045391612344565b906020909392936040835263ffffffff815116604084015281810151606084015260806123d46123be604084015160a08488015260e087019061041d565b6060840151868203603f190160a088015261041d565b910151151560c08401526001600160a01b03909416910152565b6001600160a01b0381169190821561219d576007549082820180921161243e5760009261242f602092600080516020612c4083398151915294600755611d0b565b818154019055604051908152a3565b61276d565b8051821015611ed55760209160051b010190565b90601f811161246557505050565b6000916000526020600020906020601f850160051c830194106124a3575b601f0160051c01915b82811061249857505050565b81815560010161248c565b9092508290612483565b91909182516001600160401b03811161038b576124d4816124ce8454610320565b84612457565b602080601f83116001146125175750819061250893949560009261250c575b50508160011b916000199060031b1c19161790565b9055565b0151905038806124f3565b90601f1983169561252d85600052602060002090565b926000905b88821061256a57505083600195969710612551575b505050811b019055565b015160001960f88460031b161c19169055388080612547565b80600185968294968601518155019501930190612532565b6020808201908083528351809252604092604081018260408560051b8401019601946000925b8584106125b9575050505050505090565b9091929394959685806125fc600193603f198682030188528b518760609163ffffffff815116845261ffff8682015116868501520151918189820152019061041d565b9901940194019295949391906125a8565b9060009160005b815181101561269957600190612693604061263b816126338588612443565b5101516126d3565b61268e816126498588612443565b5101519163ffffffff61265c8689612443565b515116895261ffff602091600383528a2091612678878a612443565b5101511661ffff16600052602052604060002090565b6124ad565b01612614565b507fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b6749192506126ce9060405191829182612582565b0390a1565b600361ffff600283015116036126e65750565b604051639a6d49cd60e01b815260206004820152908190610afd90602483019061041d565b60409060231901126102f25760405190612724826103a3565b60243582526044356020830152565b906001600160a01b038083161561065c578116156106435761060661276a9260018060a01b03166000526006602052604060002090565b55565b634e487b7160e01b600052601160045260246000fd5b811561278d570490565b634e487b7160e01b600052601260045260246000fd5b8181029291811591840414171561243e57565b906020116102f2573590565b906028116102f2576020013560c01c90565b610453906001600160401b037f000000000000000000000000000000000000000000000000000000000000000091166127a3565b816001600160a01b03821615612822575b610453916123ee565b61dead9150612819565b90806028116102f2576104539136916027190190602801611d57565b604c91936104539360405195869360018060c01b03199060c01b16602085015263ffffffff60e01b9060e01b166028840152602c83015261289281518092602086860191016103fa565b810103602c8101845201826103d9565b6001600160a01b03811690816128eb57506007549180830180931161243e576020600080516020612c40833981519152916000946007555b8060075403600755604051908152a3565b92916128f684611d0b565b54938185106129275781602091612921600080516020612c4083398151915294600097980391611d0b565b556128da565b610afd859260405193849363391434e360e21b8552600485016120ee565b825115801593906129a05761299d91606891604051948592602084015260018060c01b03199060c01b16604083015233604883015261298d81518092602086860191016103fa565b81010360488101845201826103d9565b91565b509060405191602083015260018060c01b03199060c01b1660408201526028815261299d81610370565b906080828203126102f257612a049060408051936129e785610370565b8051855260208101516129f981611f16565b602086015201612344565b604082015290565b612a6960809492612a859694612a20611fff565b506020612a2d8651612afd565b950191825180612aee575b50612a4285612081565b9251151592612a52610dd8611c59565b602086015260408501526060840152151585830152565b6040518095819482936302637a4560e41b845260048401612380565b03917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af190811561085257600091612ac5575090565b610453915060803d608011612ae7575b612adf81836103d9565b8101906129ca565b503d612ad5565b612af790612b1f565b38612a38565b803403612b075790565b6040516304fb820960e51b8152346004820152602490fd5b60405163393f876560e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691602081600481865afa90811561085257600091612c00575b5016918215612bee5760209160009160405190848201926323b872dd60e01b84523360248401526044830152606482015260648152612bae816103be565b519082855af115611c94576000513d612be55750803b155b612bcd5750565b60249060405190635274afe760e01b82526004820152fd5b60011415612bc6565b6040516329b99a9560e11b8152600490fd5b612c19915060203d60201161087d5761086f81836103d9565b38612b7056feefed6d3500546b29533b128a29e3a94d70788727f0507505ac12eaf2e578fd9cddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220c6accbc32c52bf7420cc738915797cbe3a91f59aabbe3b97f700093a752e482764736f6c63430008160033f3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee36e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7afa2646970667358221220ff66d9c56571566f665b9cac2b2e2369113aec64c8564c1c9a6a8d8fab6366d464736f6c63430008160033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "allowInitializePath((uint32,bytes32,uint64))": {
        "details": "This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.",
        "params": {
          "origin": "The origin information containing the source endpoint and sender address."
        },
        "returns": {
          "_0": "Whether the path has been initialized."
        }
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "details": "_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.",
        "params": {
          "_sender": "The sender address."
        },
        "returns": {
          "_0": "isSender Is a valid sender."
        }
      },
      "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": {
        "details": "Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.",
        "params": {
          "_executor": "The address of the executor for the received message.",
          "_extraData": "Additional arbitrary data provided by the corresponding executor.",
          "_guid": "The unique identifier for the received LayerZero message.",
          "_message": "The payload of the received message.",
          "_origin": "The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message."
        }
      },
      "nextNonce(uint32,bytes32)": {
        "details": "_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.",
        "returns": {
          "nonce": "The next nonce."
        }
      },
      "oAppVersion()": {
        "returns": {
          "receiverVersion": "The version of the OAppReceiver.sol implementation.",
          "senderVersion": "The version of the OAppSender.sol implementation."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setDelegate(address)": {
        "details": "Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.",
        "params": {
          "_delegate": "The address of the delegate to be set."
        }
      },
      "setPeer(uint32,bytes32)": {
        "details": "Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.",
        "params": {
          "_eid": "The endpoint ID.",
          "_peer": "The address of the peer to be associated with the corresponding endpoint."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowInitializePath((uint32,bytes32,uint64))": {
        "notice": "Checks if the path initialization is allowed based on the provided origin."
      },
      "endpoint()": {
        "notice": "Retrieves the LayerZero endpoint associated with the OApp."
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "notice": "Indicates whether an address is an approved composeMsg sender to the Endpoint."
      },
      "nextNonce(uint32,bytes32)": {
        "notice": "Retrieves the next nonce for a given source endpoint and sender address."
      },
      "oAppVersion()": {
        "notice": "Retrieves the OApp version information."
      },
      "peers(uint32)": {
        "notice": "Retrieves the peer (OApp) associated with a corresponding endpoint."
      },
      "setDelegate(address)": {
        "notice": "Sets the delegate address for the OApp."
      },
      "setPeer(uint32,bytes32)": {
        "notice": "Sets the peer address (OApp instance) for a corresponding endpoint."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3841,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1390,
        "contract": "contracts/Factory.sol:Factory",
        "label": "peers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 5303,
        "contract": "contracts/Factory.sol:Factory",
        "label": "totalTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5308,
        "contract": "contracts/Factory.sol:Factory",
        "label": "nativeLiquidityPool",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(NativeLiquidityPool)7399"
      },
      {
        "astId": 5311,
        "contract": "contracts/Factory.sol:Factory",
        "label": "tokens",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5316,
        "contract": "contracts/Factory.sol:Factory",
        "label": "tokenToSale",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(TokenSale)5356_storage)"
      },
      {
        "astId": 5322,
        "contract": "contracts/Factory.sol:Factory",
        "label": "userTokenContributions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5328,
        "contract": "contracts/Factory.sol:Factory",
        "label": "userEthContributions",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5334,
        "contract": "contracts/Factory.sol:Factory",
        "label": "hasClaimedReward",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5339,
        "contract": "contracts/Factory.sol:Factory",
        "label": "tokenContributors",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(NativeLiquidityPool)7399": {
        "encoding": "inplace",
        "label": "contract NativeLiquidityPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(TokenSale)5356_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Factory.TokenSale)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenSale)5356_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenSale)5356_storage": {
        "encoding": "inplace",
        "label": "struct Factory.TokenSale",
        "members": [
          {
            "astId": 5341,
            "contract": "contracts/Factory.sol:Factory",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5343,
            "contract": "contracts/Factory.sol:Factory",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 5345,
            "contract": "contracts/Factory.sol:Factory",
            "label": "metadataURI",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 5347,
            "contract": "contracts/Factory.sol:Factory",
            "label": "creator",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 5349,
            "contract": "contracts/Factory.sol:Factory",
            "label": "sold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5351,
            "contract": "contracts/Factory.sol:Factory",
            "label": "raised",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5353,
            "contract": "contracts/Factory.sol:Factory",
            "label": "isOpen",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 5355,
            "contract": "contracts/Factory.sol:Factory",
            "label": "isLiquidityCreated",
            "offset": 1,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}